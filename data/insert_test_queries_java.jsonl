{"code": "public static String reverseString(String str) {\n    return new StringBuilder(str).reverse().toString();\n}", "docstring": "Reverses a given string using StringBuilder.", "originalCode": "public static String reverseString(String str) {\n    return new StringBuilder(str).reverse().toString();\n}", "language": "java"}
{"code": "public static long factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}", "docstring": "Calculates the factorial of a number using recursion.", "originalCode": "public static long factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}", "language": "java"}
{"code": "public static int findMax(int[] nums) {\n    int max = nums[0];\n    for (int i = 1; i < nums.length; i++) {\n        if (nums[i] > max) {\n            max = nums[i];\n        }\n    }\n    return max;\n}", "docstring": "Finds the maximum value in an array of integers.", "originalCode": "public static int findMax(int[] nums) {\n    int max = nums[0];\n    for (int i = 1; i < nums.length; i++) {\n        if (nums[i] > max) {\n            max = nums[i];\n        }\n    }\n    return max;\n}", "language": "java"}
{"code": "public static int fib(int n, Map<Integer, Integer> memo) {\n    if (memo.containsKey(n)) return memo.get(n);\n    if (n <= 1) return n;\n    int value = fib(n - 1, memo) + fib(n - 2, memo);\n    memo.put(n, value);\n    return value;\n}", "docstring": "Recursive Fibonacci with memoization using Map.", "originalCode": "public static int fib(int n, Map<Integer, Integer> memo) {\n    if (memo.containsKey(n)) return memo.get(n);\n    if (n <= 1) return n;\n    int value = fib(n - 1, memo) + fib(n - 2, memo);\n    memo.put(n, value);\n    return value;\n}", "language": "java"}
{"code": "public static int fibonacciMemo(int n, HashMap<Integer, Integer> memo) {\n    if (memo.containsKey(n)) return memo.get(n);\n    if (n <= 1) return n;\n    int result = fibonacciMemo(n-1, memo) + fibonacciMemo(n-2, memo);\n    memo.put(n, result);\n    return result;\n}", "docstring": "Computes the nth Fibonacci number using memoization.", "originalCode": "public static int fibonacciMemo(int n, HashMap<Integer, Integer> memo) {\n    if (memo.containsKey(n)) return memo.get(n);\n    if (n <= 1) return n;\n    int result = fibonacciMemo(n-1, memo) + fibonacciMemo(n-2, memo);\n    memo.put(n, result);\n    return result;\n}", "language": "java"}
{"code": "public static Map<Character, Integer> countCharacters(String input) {\n    Map<Character, Integer> map = new HashMap<>();\n    for (char c : input.toCharArray()) {\n        map.put(c, map.getOrDefault(c, 0) + 1);\n    }\n    return map;\n}", "docstring": "Counts the frequency of each character in the string.", "originalCode": "public static Map<Character, Integer> countCharacters(String input) {\n    Map<Character, Integer> map = new HashMap<>();\n    for (char c : input.toCharArray()) {\n        map.put(c, map.getOrDefault(c, 0) + 1);\n    }\n    return map;\n}", "language": "java"}
{"code": "public Map<Character, Integer> getCharFreq(String str) {\n    Map<Character, Integer> freq = new HashMap<>();\n    for (int i = 0; i < str.length(); i++) {\n        char ch = str.charAt(i);\n        freq.put(ch, freq.getOrDefault(ch, 0) + 1);\n    }\n    return freq;\n}", "docstring": "Returns a map with the frequency of characters in the string.", "originalCode": "public Map<Character, Integer> getCharFreq(String str) {\n    Map<Character, Integer> freq = new HashMap<>();\n    for (int i = 0; i < str.length(); i++) {\n        char ch = str.charAt(i);\n        freq.put(ch, freq.getOrDefault(ch, 0) + 1);\n    }\n    return freq;\n}", "language": "java"}
