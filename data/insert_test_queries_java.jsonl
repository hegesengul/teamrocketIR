{"code": "public static String reverseString(String str) {\n    return new StringBuilder(str).reverse().toString();\n}", "docstring": "Reverses a given string using StringBuilder.", "originalCode": "public static String reverseString(String str) {\n    return new StringBuilder(str).reverse().toString();\n}", "language": "java"}
{"code": "public static long factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}", "docstring": "Calculates the factorial of a number using recursion.", "originalCode": "public static long factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}", "language": "java"}
{"code": "public static int findMax(int[] nums) {\n    int max = nums[0];\n    for (int i = 1; i < nums.length; i++) {\n        if (nums[i] > max) {\n            max = nums[i];\n        }\n    }\n    return max;\n}", "docstring": "Finds the maximum value in an array of integers.", "originalCode": "public static int findMax(int[] nums) {\n    int max = nums[0];\n    for (int i = 1; i < nums.length; i++) {\n        if (nums[i] > max) {\n            max = nums[i];\n        }\n    }\n    return max;\n}", "language": "java"}
{"code": "public static int fib(int n, Map<Integer, Integer> memo) {\n    if (memo.containsKey(n)) return memo.get(n);\n    if (n <= 1) return n;\n    int value = fib(n - 1, memo) + fib(n - 2, memo);\n    memo.put(n, value);\n    return value;\n}", "docstring": "Recursive Fibonacci with memoization using Map.", "originalCode": "public static int fib(int n, Map<Integer, Integer> memo) {\n    if (memo.containsKey(n)) return memo.get(n);\n    if (n <= 1) return n;\n    int value = fib(n - 1, memo) + fib(n - 2, memo);\n    memo.put(n, value);\n    return value;\n}", "language": "java"}
{"code": "public static int fibonacciMemo(int n, HashMap<Integer, Integer> memo) {\n    if (memo.containsKey(n)) return memo.get(n);\n    if (n <= 1) return n;\n    int result = fibonacciMemo(n-1, memo) + fibonacciMemo(n-2, memo);\n    memo.put(n, result);\n    return result;\n}", "docstring": "Computes the nth Fibonacci number using memoization.", "originalCode": "public static int fibonacciMemo(int n, HashMap<Integer, Integer> memo) {\n    if (memo.containsKey(n)) return memo.get(n);\n    if (n <= 1) return n;\n    int result = fibonacciMemo(n-1, memo) + fibonacciMemo(n-2, memo);\n    memo.put(n, result);\n    return result;\n}", "language": "java"}
{"code": "public static Map<Character, Integer> countCharacters(String input) {\n    Map<Character, Integer> map = new HashMap<>();\n    for (char c : input.toCharArray()) {\n        map.put(c, map.getOrDefault(c, 0) + 1);\n    }\n    return map;\n}", "docstring": "Counts the frequency of each character in the string.", "originalCode": "public static Map<Character, Integer> countCharacters(String input) {\n    Map<Character, Integer> map = new HashMap<>();\n    for (char c : input.toCharArray()) {\n        map.put(c, map.getOrDefault(c, 0) + 1);\n    }\n    return map;\n}", "language": "java"}
{"code": "public Map<Character, Integer> getCharFreq(String str) {\n    Map<Character, Integer> freq = new HashMap<>();\n    for (int i = 0; i < str.length(); i++) {\n        char ch = str.charAt(i);\n        freq.put(ch, freq.getOrDefault(ch, 0) + 1);\n    }\n    return freq;\n}", "docstring": "Returns a map with the frequency of characters in the string.", "originalCode": "public Map<Character, Integer> getCharFreq(String str) {\n    Map<Character, Integer> freq = new HashMap<>();\n    for (int i = 0; i < str.length(); i++) {\n        char ch = str.charAt(i);\n        freq.put(ch, freq.getOrDefault(ch, 0) + 1);\n    }\n    return freq;\n}", "language": "java"}
{"code": "public static int countLines(String filename) throws IOException {\n    BufferedReader reader = new BufferedReader(new FileReader(filename));\n    int lines = 0;\n    while (reader.readLine() != null) lines++;\n    reader.close();\n    return lines;\n}", "docstring": "Reads a file and returns the total number of lines.", "originalCode": "public static int countLines(String filename) throws IOException {\n    BufferedReader reader = new BufferedReader(new FileReader(filename));\n    int lines = 0;\n    while (reader.readLine() != null) lines++;\n    reader.close();\n    return lines;\n}", "language": "java"}
{"code": "public int lineCount(String file) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(file))) {\n        int count = 0;\n        while (br.readLine() != null) {\n            count++;\n        }\n        return count;\n    }\n}", "docstring": "Counts number of lines in a file using BufferedReader.", "originalCode": "public int lineCount(String file) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(file))) {\n        int count = 0;\n        while (br.readLine() != null) {\n            count++;\n        }\n        return count;\n    }\n}", "language": "java"}
{"code": "public static boolean isPalindrome(String s) {\n    return new StringBuilder(s).reverse().toString().equals(s);\n}", "docstring": "Checks if a string is a palindrome using StringBuilder.", "originalCode": "public static boolean isPalindrome(String s) {\n    return new StringBuilder(s).reverse().toString().equals(s);\n}", "language": "java"}
{"code": "public boolean checkPalindrome(String str) {\n    int n = str.length();\n    for (int i = 0; i < n / 2; i++) {\n        if (str.charAt(i) != str.charAt(n - i - 1)) return false;\n    }\n    return true;\n}", "docstring": "Checks if the input string is a palindrome using a loop.", "originalCode": "public boolean checkPalindrome(String str) {\n    int n = str.length();\n    for (int i = 0; i < n / 2; i++) {\n        if (str.charAt(i) != str.charAt(n - i - 1)) return false;\n    }\n    return true;\n}", "language": "java"}
{"code": "public static void bubbleSort(int[] arr) {\n    int n = arr.length;\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n}", "docstring": "Sorts the input integer array using the bubble sort algorithm.", "originalCode": "public static void bubbleSort(int[] arr) {\n    int n = arr.length;\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n}", "language": "java"}
{"code": "public void bubbleSortArray(int[] array) {\n    for (int i = 0; i < array.length - 1; i++) {\n        for (int j = 0; j < array.length - i - 1; j++) {\n            if (array[j] > array[j + 1]) {\n                int temp = array[j];\n                array[j] = array[j + 1];\n                array[j + 1] = temp;\n            }\n        }\n    }\n}", "docstring": "Performs bubble sort on an integer array.", "originalCode": "public void bubbleSortArray(int[] array) {\n    for (int i = 0; i < array.length - 1; i++) {\n        for (int j = 0; j < array.length - i - 1; j++) {\n            if (array[j] > array[j + 1]) {\n                int temp = array[j];\n                array[j] = array[j + 1];\n                array[j + 1] = temp;\n            }\n        }\n    }\n}", "language": "java"}
{"code": "public static int sumList(int[] nums) {\n    int total = 0;\n    for (int num : nums) {\n        total += num;\n    }\n    return total;\n}", "docstring": "Sums up all integers in the input array.", "originalCode": "public static int sumList(int[] nums) {\n    int total = 0;\n    for (int num : nums) {\n        total += num;\n    }\n    return total;\n}", "language": "java"}
{"code": "public int calculateSum(int[] arr) {\n    int sum = 0;\n    for (int i = 0; i < arr.length; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}", "docstring": "Calculates and returns the sum of the array elements.", "originalCode": "public int calculateSum(int[] arr) {\n    int sum = 0;\n    for (int i = 0; i < arr.length; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}", "language": "java"}
{"code": "public static int max(int a, int b) {\n    return (a > b) ? a : b;\n}", "docstring": "Returns the larger of two integers using a ternary operator.", "originalCode": "public static int max(int a, int b) {\n    return (a > b) ? a : b;\n}", "language": "java"}
{"code": "public int maximum(int x, int y) {\n    if (x > y) {\n        return x;\n    } else {\n        return y;\n    }\n}", "docstring": "Determines the maximum of two integers using an if-else block.", "originalCode": "public int maximum(int x, int y) {\n    if (x > y) {\n        return x;\n    } else {\n        return y;\n    }\n}", "language": "java"}
{"code": "public static int countWords(String str) {\n    if (str == null || str.trim().isEmpty()) return 0;\n    String[] words = str.trim().split(\"\\\\s+\");\n    return words.length;\n}", "docstring": "Counts the number of words in a string by splitting using whitespace.", "originalCode": "public static int countWords(String str) {\n    if (str == null || str.trim().isEmpty()) return 0;\n    String[] words = str.trim().split(\"\\\\s+\");\n    return words.length;\n}", "language": "java"}
{"code": "public int wordCount(String input) {\n    String trimmed = input.trim();\n    if (trimmed.isEmpty()) return 0;\n    return trimmed.split(\"\\\\s+\").length;\n}", "docstring": "Returns number of words found in a trimmed string.", "originalCode": "public int wordCount(String input) {\n    String trimmed = input.trim();\n    if (trimmed.isEmpty()) return 0;\n    return trimmed.split(\"\\\\s+\").length;\n}", "language": "java"}
{"code": "public List<Integer> filterPositives(List<Integer> nums) {\n    List<Integer> result = new ArrayList<>();\n    for (int n : nums) {\n        if (n > 0) {\n            result.add(n);\n        }\n    }\n    return result;\n}", "docstring": "Filters and returns all positive integers from a list.", "originalCode": "public List<Integer> filterPositives(List<Integer> nums) {\n    List<Integer> result = new ArrayList<>();\n    for (int n : nums) {\n        if (n > 0) {\n            result.add(n);\n        }\n    }\n    return result;\n}", "language": "java"}
{"code": "public static int[] getPositiveOnly(int[] arr) {\n    return Arrays.stream(arr).filter(i -> i > 0).toArray();\n}", "docstring": "Uses Java streams to return a new array with only positive integers.", "originalCode": "public static int[] getPositiveOnly(int[] arr) {\n    return Arrays.stream(arr).filter(i -> i > 0).toArray();\n}", "language": "java"}
{"code": "public Map<Character, Integer> countLetters(String text) {\n    Map<Character, Integer> map = new HashMap<>();\n    for (char c : text.toCharArray()) {\n        if (Character.isLetter(c)) {\n            map.put(c, map.getOrDefault(c, 0) + 1);\n        }\n    }\n    return map;\n}", "docstring": "Counts occurrences of alphabetic characters in the input string.", "originalCode": "public Map<Character, Integer> countLetters(String text) {\n    Map<Character, Integer> map = new HashMap<>();\n    for (char c : text.toCharArray()) {\n        if (Character.isLetter(c)) {\n            map.put(c, map.getOrDefault(c, 0) + 1);\n        }\n    }\n    return map;\n}", "language": "java"}
{"code": "public static Map<Character, Integer> letterFrequency(String str) {\n    Map<Character, Integer> freq = new HashMap<>();\n    for (char ch : str.toCharArray()) {\n        if (Character.isAlphabetic(ch)) {\n            freq.put(ch, freq.getOrDefault(ch, 0) + 1);\n        }\n    }\n    return freq;\n}", "docstring": "Builds a map of letter frequencies from the given string.", "originalCode": "public static Map<Character, Integer> letterFrequency(String str) {\n    Map<Character, Integer> freq = new HashMap<>();\n    for (char ch : str.toCharArray()) {\n        if (Character.isAlphabetic(ch)) {\n            freq.put(ch, freq.getOrDefault(ch, 0) + 1);\n        }\n    }\n    return freq;\n}", "language": "java"}
{"code": "public List<Integer> squareAll(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<>();\n    for (int n : numbers) {\n        result.add(n * n);\n    }\n    return result;\n}", "docstring": "Returns a list containing squares of the given integers.", "originalCode": "public List<Integer> squareAll(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<>();\n    for (int n : numbers) {\n        result.add(n * n);\n    }\n    return result;\n}", "language": "java"}
{"code": "public static int[] squareArray(int[] arr) {\n    return Arrays.stream(arr).map(n -> n * n).toArray();\n}", "docstring": "Uses Java Streams to square each element in an array.", "originalCode": "public static int[] squareArray(int[] arr) {\n    return Arrays.stream(arr).map(n -> n * n).toArray();\n}", "language": "java"}
{"code":"public String getUserData(String userId) throws IOException {\n    String url = \"https://api.example.com/user/\" + userId;\n    HttpClient client = HttpClient.newHttpClient();\n    HttpRequest request = HttpRequest.newBuilder()\n        .uri(URI.create(url))\n        .header(\"Authorization\", \"Bearer YOUR_API_TOKEN\")\n        .build();\n    HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());\n    if (response.statusCode() == 200) {\n        return response.body();\n    } else {\n        throw new IOException(\"Failed to get user data: \" + response.statusCode());\n    }\n}","docstring":"Makes a GET request to retrieve user data with an authorization token.","originalCode":"public String getUserData(String userId) throws IOException {\n    String url = \"https://api.example.com/user/\" + userId;\n    HttpClient client = HttpClient.newHttpClient();\n    HttpRequest request = HttpRequest.newBuilder()\n        .uri(URI.create(url))\n        .header(\"Authorization\", \"Bearer YOUR_API_TOKEN\")\n        .build();\n    HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());\n    if (response.statusCode() == 200) {\n        return response.body();\n    } else {\n        throw new IOException(\"Failed to get user data: \" + response.statusCode());\n    }\n}","language":"java"}
{"code":"public static String fetchUserInfo(String userId) {\n    try {\n        HttpClient client = HttpClient.newHttpClient();\n        HttpRequest request = HttpRequest.newBuilder()\n            .uri(URI.create(\"https://api.example.com/user/\" + userId))\n            .header(\"Authorization\", \"Bearer TOKEN123\")\n            .build();\n        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());\n        if (response.statusCode() == 200) {\n            return response.body();\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return null;\n}","docstring":"Retrieves user info handling exceptions with Java HttpClient.","originalCode":"public static String fetchUserInfo(String userId) {\n    try {\n        HttpClient client = HttpClient.newHttpClient();\n        HttpRequest request = HttpRequest.newBuilder()\n            .uri(URI.create(\"https://api.example.com/user/\" + userId))\n            .header(\"Authorization\", \"Bearer TOKEN123\")\n            .build();\n        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());\n        if (response.statusCode() == 200) {\n            return response.body();\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return null;\n}","language":"java"}
{"code":"public class LambdaS3Handler {\n    public String handleRequest(S3Event event, Context context) {\n        S3Object s3Object = event.getRecords().get(0).getS3().getObject();\n        String bucketName = event.getRecords().get(0).getS3().getBucket().getName();\n        String key = s3Object.getKey();\n        AmazonS3 s3Client = AmazonS3ClientBuilder.defaultClient();\n        S3Object object = s3Client.getObject(bucketName, key);\n        try (InputStream input = object.getObjectContent()) {\n            return new String(input.readAllBytes(), StandardCharsets.UTF_8);\n        } catch (IOException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n}","docstring":"AWS Lambda Java handler that processes S3 event and returns file content as string.","originalCode":"public class LambdaS3Handler {\n    public String handleRequest(S3Event event, Context context) {\n        S3Object s3Object = event.getRecords().get(0).getS3().getObject();\n        String bucketName = event.getRecords().get(0).getS3().getBucket().getName();\n        String key = s3Object.getKey();\n        AmazonS3 s3Client = AmazonS3ClientBuilder.defaultClient();\n        S3Object object = s3Client.getObject(bucketName, key);\n        try (InputStream input = object.getObjectContent()) {\n            return new String(input.readAllBytes(), StandardCharsets.UTF_8);\n        } catch (IOException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n}","language":"java"}
{"code":"public List<Integer> filterAndSort(List<Integer> nums) {\n    return nums.stream()\n               .filter(n -> n % 2 == 0)\n               .sorted(Comparator.reverseOrder())\n               .collect(Collectors.toList());\n}","docstring":"Filters even integers and returns them sorted in descending order.","originalCode":"public List<Integer> filterAndSort(List<Integer> nums) {\n    return nums.stream()\n               .filter(n -> n % 2 == 0)\n               .sorted(Comparator.reverseOrder())\n               .collect(Collectors.toList());\n}","language":"java"}
