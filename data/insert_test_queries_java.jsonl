{"code": "public static String reverseString(String str) {\n    return new StringBuilder(str).reverse().toString();\n}", "docstring": "Reverses a given string using StringBuilder.", "originalCode": "public static String reverseString(String str) {\n    return new StringBuilder(str).reverse().toString();\n}", "language": "java"}
{"code": "public static long factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}", "docstring": "Calculates the factorial of a number using recursion.", "originalCode": "public static long factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}", "language": "java"}
{"code": "public static int findMax(int[] nums) {\n    int max = nums[0];\n    for (int i = 1; i < nums.length; i++) {\n        if (nums[i] > max) {\n            max = nums[i];\n        }\n    }\n    return max;\n}", "docstring": "Finds the maximum value in an array of integers.", "originalCode": "public static int findMax(int[] nums) {\n    int max = nums[0];\n    for (int i = 1; i < nums.length; i++) {\n        if (nums[i] > max) {\n            max = nums[i];\n        }\n    }\n    return max;\n}", "language": "java"}
{"code": "public static int fib(int n, Map<Integer, Integer> memo) {\n    if (memo.containsKey(n)) return memo.get(n);\n    if (n <= 1) return n;\n    int value = fib(n - 1, memo) + fib(n - 2, memo);\n    memo.put(n, value);\n    return value;\n}", "docstring": "Recursive Fibonacci with memoization using Map.", "originalCode": "public static int fib(int n, Map<Integer, Integer> memo) {\n    if (memo.containsKey(n)) return memo.get(n);\n    if (n <= 1) return n;\n    int value = fib(n - 1, memo) + fib(n - 2, memo);\n    memo.put(n, value);\n    return value;\n}", "language": "java"}
{"code": "public static int fibonacciMemo(int n, HashMap<Integer, Integer> memo) {\n    if (memo.containsKey(n)) return memo.get(n);\n    if (n <= 1) return n;\n    int result = fibonacciMemo(n-1, memo) + fibonacciMemo(n-2, memo);\n    memo.put(n, result);\n    return result;\n}", "docstring": "Computes the nth Fibonacci number using memoization.", "originalCode": "public static int fibonacciMemo(int n, HashMap<Integer, Integer> memo) {\n    if (memo.containsKey(n)) return memo.get(n);\n    if (n <= 1) return n;\n    int result = fibonacciMemo(n-1, memo) + fibonacciMemo(n-2, memo);\n    memo.put(n, result);\n    return result;\n}", "language": "java"}
{"code": "public static Map<Character, Integer> countCharacters(String input) {\n    Map<Character, Integer> map = new HashMap<>();\n    for (char c : input.toCharArray()) {\n        map.put(c, map.getOrDefault(c, 0) + 1);\n    }\n    return map;\n}", "docstring": "Counts the frequency of each character in the string.", "originalCode": "public static Map<Character, Integer> countCharacters(String input) {\n    Map<Character, Integer> map = new HashMap<>();\n    for (char c : input.toCharArray()) {\n        map.put(c, map.getOrDefault(c, 0) + 1);\n    }\n    return map;\n}", "language": "java"}
{"code": "public Map<Character, Integer> getCharFreq(String str) {\n    Map<Character, Integer> freq = new HashMap<>();\n    for (int i = 0; i < str.length(); i++) {\n        char ch = str.charAt(i);\n        freq.put(ch, freq.getOrDefault(ch, 0) + 1);\n    }\n    return freq;\n}", "docstring": "Returns a map with the frequency of characters in the string.", "originalCode": "public Map<Character, Integer> getCharFreq(String str) {\n    Map<Character, Integer> freq = new HashMap<>();\n    for (int i = 0; i < str.length(); i++) {\n        char ch = str.charAt(i);\n        freq.put(ch, freq.getOrDefault(ch, 0) + 1);\n    }\n    return freq;\n}", "language": "java"}
{"code": "public static int countLines(String filename) throws IOException {\n    BufferedReader reader = new BufferedReader(new FileReader(filename));\n    int lines = 0;\n    while (reader.readLine() != null) lines++;\n    reader.close();\n    return lines;\n}", "docstring": "Reads a file and returns the total number of lines.", "originalCode": "public static int countLines(String filename) throws IOException {\n    BufferedReader reader = new BufferedReader(new FileReader(filename));\n    int lines = 0;\n    while (reader.readLine() != null) lines++;\n    reader.close();\n    return lines;\n}", "language": "java"}
{"code": "public int lineCount(String file) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(file))) {\n        int count = 0;\n        while (br.readLine() != null) {\n            count++;\n        }\n        return count;\n    }\n}", "docstring": "Counts number of lines in a file using BufferedReader.", "originalCode": "public int lineCount(String file) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(file))) {\n        int count = 0;\n        while (br.readLine() != null) {\n            count++;\n        }\n        return count;\n    }\n}", "language": "java"}
{"code": "public static boolean isPalindrome(String s) {\n    return new StringBuilder(s).reverse().toString().equals(s);\n}", "docstring": "Checks if a string is a palindrome using StringBuilder.", "originalCode": "public static boolean isPalindrome(String s) {\n    return new StringBuilder(s).reverse().toString().equals(s);\n}", "language": "java"}
{"code": "public boolean checkPalindrome(String str) {\n    int n = str.length();\n    for (int i = 0; i < n / 2; i++) {\n        if (str.charAt(i) != str.charAt(n - i - 1)) return false;\n    }\n    return true;\n}", "docstring": "Checks if the input string is a palindrome using a loop.", "originalCode": "public boolean checkPalindrome(String str) {\n    int n = str.length();\n    for (int i = 0; i < n / 2; i++) {\n        if (str.charAt(i) != str.charAt(n - i - 1)) return false;\n    }\n    return true;\n}", "language": "java"}
{"code": "public static void bubbleSort(int[] arr) {\n    int n = arr.length;\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n}", "docstring": "Sorts the input integer array using the bubble sort algorithm.", "originalCode": "public static void bubbleSort(int[] arr) {\n    int n = arr.length;\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n}", "language": "java"}
{"code": "public void bubbleSortArray(int[] array) {\n    for (int i = 0; i < array.length - 1; i++) {\n        for (int j = 0; j < array.length - i - 1; j++) {\n            if (array[j] > array[j + 1]) {\n                int temp = array[j];\n                array[j] = array[j + 1];\n                array[j + 1] = temp;\n            }\n        }\n    }\n}", "docstring": "Performs bubble sort on an integer array.", "originalCode": "public void bubbleSortArray(int[] array) {\n    for (int i = 0; i < array.length - 1; i++) {\n        for (int j = 0; j < array.length - i - 1; j++) {\n            if (array[j] > array[j + 1]) {\n                int temp = array[j];\n                array[j] = array[j + 1];\n                array[j + 1] = temp;\n            }\n        }\n    }\n}", "language": "java"}
{"code": "public static int sumList(int[] nums) {\n    int total = 0;\n    for (int num : nums) {\n        total += num;\n    }\n    return total;\n}", "docstring": "Sums up all integers in the input array.", "originalCode": "public static int sumList(int[] nums) {\n    int total = 0;\n    for (int num : nums) {\n        total += num;\n    }\n    return total;\n}", "language": "java"}
{"code": "public int calculateSum(int[] arr) {\n    int sum = 0;\n    for (int i = 0; i < arr.length; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}", "docstring": "Calculates and returns the sum of the array elements.", "originalCode": "public int calculateSum(int[] arr) {\n    int sum = 0;\n    for (int i = 0; i < arr.length; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}", "language": "java"}
{"code": "public static int max(int a, int b) {\n    return (a > b) ? a : b;\n}", "docstring": "Returns the larger of two integers using a ternary operator.", "originalCode": "public static int max(int a, int b) {\n    return (a > b) ? a : b;\n}", "language": "java"}
{"code": "public int maximum(int x, int y) {\n    if (x > y) {\n        return x;\n    } else {\n        return y;\n    }\n}", "docstring": "Determines the maximum of two integers using an if-else block.", "originalCode": "public int maximum(int x, int y) {\n    if (x > y) {\n        return x;\n    } else {\n        return y;\n    }\n}", "language": "java"}
{"code": "public static int countWords(String str) {\n    if (str == null || str.trim().isEmpty()) return 0;\n    String[] words = str.trim().split(\"\\\\s+\");\n    return words.length;\n}", "docstring": "Counts the number of words in a string by splitting using whitespace.", "originalCode": "public static int countWords(String str) {\n    if (str == null || str.trim().isEmpty()) return 0;\n    String[] words = str.trim().split(\"\\\\s+\");\n    return words.length;\n}", "language": "java"}
{"code": "public int wordCount(String input) {\n    String trimmed = input.trim();\n    if (trimmed.isEmpty()) return 0;\n    return trimmed.split(\"\\\\s+\").length;\n}", "docstring": "Returns number of words found in a trimmed string.", "originalCode": "public int wordCount(String input) {\n    String trimmed = input.trim();\n    if (trimmed.isEmpty()) return 0;\n    return trimmed.split(\"\\\\s+\").length;\n}", "language": "java"}
{"code": "public List<Integer> filterPositives(List<Integer> nums) {\n    List<Integer> result = new ArrayList<>();\n    for (int n : nums) {\n        if (n > 0) {\n            result.add(n);\n        }\n    }\n    return result;\n}", "docstring": "Filters and returns all positive integers from a list.", "originalCode": "public List<Integer> filterPositives(List<Integer> nums) {\n    List<Integer> result = new ArrayList<>();\n    for (int n : nums) {\n        if (n > 0) {\n            result.add(n);\n        }\n    }\n    return result;\n}", "language": "java"}
{"code": "public static int[] getPositiveOnly(int[] arr) {\n    return Arrays.stream(arr).filter(i -> i > 0).toArray();\n}", "docstring": "Uses Java streams to return a new array with only positive integers.", "originalCode": "public static int[] getPositiveOnly(int[] arr) {\n    return Arrays.stream(arr).filter(i -> i > 0).toArray();\n}", "language": "java"}
{"code": "public Map<Character, Integer> countLetters(String text) {\n    Map<Character, Integer> map = new HashMap<>();\n    for (char c : text.toCharArray()) {\n        if (Character.isLetter(c)) {\n            map.put(c, map.getOrDefault(c, 0) + 1);\n        }\n    }\n    return map;\n}", "docstring": "Counts occurrences of alphabetic characters in the input string.", "originalCode": "public Map<Character, Integer> countLetters(String text) {\n    Map<Character, Integer> map = new HashMap<>();\n    for (char c : text.toCharArray()) {\n        if (Character.isLetter(c)) {\n            map.put(c, map.getOrDefault(c, 0) + 1);\n        }\n    }\n    return map;\n}", "language": "java"}
{"code": "public static Map<Character, Integer> letterFrequency(String str) {\n    Map<Character, Integer> freq = new HashMap<>();\n    for (char ch : str.toCharArray()) {\n        if (Character.isAlphabetic(ch)) {\n            freq.put(ch, freq.getOrDefault(ch, 0) + 1);\n        }\n    }\n    return freq;\n}", "docstring": "Builds a map of letter frequencies from the given string.", "originalCode": "public static Map<Character, Integer> letterFrequency(String str) {\n    Map<Character, Integer> freq = new HashMap<>();\n    for (char ch : str.toCharArray()) {\n        if (Character.isAlphabetic(ch)) {\n            freq.put(ch, freq.getOrDefault(ch, 0) + 1);\n        }\n    }\n    return freq;\n}", "language": "java"}
{"code": "public List<Integer> squareAll(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<>();\n    for (int n : numbers) {\n        result.add(n * n);\n    }\n    return result;\n}", "docstring": "Returns a list containing squares of the given integers.", "originalCode": "public List<Integer> squareAll(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<>();\n    for (int n : numbers) {\n        result.add(n * n);\n    }\n    return result;\n}", "language": "java"}
{"code": "public static int[] squareArray(int[] arr) {\n    return Arrays.stream(arr).map(n -> n * n).toArray();\n}", "docstring": "Uses Java Streams to square each element in an array.", "originalCode": "public static int[] squareArray(int[] arr) {\n    return Arrays.stream(arr).map(n -> n * n).toArray();\n}", "language": "java"}
{"code":"public String getUserData(String userId) throws IOException {\n    String url = \"https://api.example.com/user/\" + userId;\n    HttpClient client = HttpClient.newHttpClient();\n    HttpRequest request = HttpRequest.newBuilder()\n        .uri(URI.create(url))\n        .header(\"Authorization\", \"Bearer YOUR_API_TOKEN\")\n        .build();\n    HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());\n    if (response.statusCode() == 200) {\n        return response.body();\n    } else {\n        throw new IOException(\"Failed to get user data: \" + response.statusCode());\n    }\n}","docstring":"Makes a GET request to retrieve user data with an authorization token.","originalCode":"public String getUserData(String userId) throws IOException {\n    String url = \"https://api.example.com/user/\" + userId;\n    HttpClient client = HttpClient.newHttpClient();\n    HttpRequest request = HttpRequest.newBuilder()\n        .uri(URI.create(url))\n        .header(\"Authorization\", \"Bearer YOUR_API_TOKEN\")\n        .build();\n    HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());\n    if (response.statusCode() == 200) {\n        return response.body();\n    } else {\n        throw new IOException(\"Failed to get user data: \" + response.statusCode());\n    }\n}","language":"java"}
{"code":"public static String fetchUserInfo(String userId) {\n    try {\n        HttpClient client = HttpClient.newHttpClient();\n        HttpRequest request = HttpRequest.newBuilder()\n            .uri(URI.create(\"https://api.example.com/user/\" + userId))\n            .header(\"Authorization\", \"Bearer TOKEN123\")\n            .build();\n        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());\n        if (response.statusCode() == 200) {\n            return response.body();\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return null;\n}","docstring":"Retrieves user info handling exceptions with Java HttpClient.","originalCode":"public static String fetchUserInfo(String userId) {\n    try {\n        HttpClient client = HttpClient.newHttpClient();\n        HttpRequest request = HttpRequest.newBuilder()\n            .uri(URI.create(\"https://api.example.com/user/\" + userId))\n            .header(\"Authorization\", \"Bearer TOKEN123\")\n            .build();\n        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());\n        if (response.statusCode() == 200) {\n            return response.body();\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return null;\n}","language":"java"}
{"code":"public class LambdaS3Handler {\n    public String handleRequest(S3Event event, Context context) {\n        S3Object s3Object = event.getRecords().get(0).getS3().getObject();\n        String bucketName = event.getRecords().get(0).getS3().getBucket().getName();\n        String key = s3Object.getKey();\n        AmazonS3 s3Client = AmazonS3ClientBuilder.defaultClient();\n        S3Object object = s3Client.getObject(bucketName, key);\n        try (InputStream input = object.getObjectContent()) {\n            return new String(input.readAllBytes(), StandardCharsets.UTF_8);\n        } catch (IOException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n}","docstring":"AWS Lambda Java handler that processes S3 event and returns file content as string.","originalCode":"public class LambdaS3Handler {\n    public String handleRequest(S3Event event, Context context) {\n        S3Object s3Object = event.getRecords().get(0).getS3().getObject();\n        String bucketName = event.getRecords().get(0).getS3().getBucket().getName();\n        String key = s3Object.getKey();\n        AmazonS3 s3Client = AmazonS3ClientBuilder.defaultClient();\n        S3Object object = s3Client.getObject(bucketName, key);\n        try (InputStream input = object.getObjectContent()) {\n            return new String(input.readAllBytes(), StandardCharsets.UTF_8);\n        } catch (IOException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n}","language":"java"}
{"code":"public List<Integer> filterAndSort(List<Integer> nums) {\n    return nums.stream()\n               .filter(n -> n % 2 == 0)\n               .sorted(Comparator.reverseOrder())\n               .collect(Collectors.toList());\n}","docstring":"Filters even integers and returns them sorted in descending order.","originalCode":"public List<Integer> filterAndSort(List<Integer> nums) {\n    return nums.stream()\n               .filter(n -> n % 2 == 0)\n               .sorted(Comparator.reverseOrder())\n               .collect(Collectors.toList());\n}","language":"java"}
{"code":"public static List<Map<String, Object>> filterAndSort(List<Map<String, Object>> users) {\n    return users.stream()\n        .filter(u -> Boolean.TRUE.equals(u.get(\"active\")))\n        .sorted(Comparator.comparingInt(u -> (int) u.get(\"age\")))\n        .collect(Collectors.toList());\n}","docstring":"Filters users by 'active' and sorts by 'age'.","originalCode":"public static List<Map<String, Object>> filterAndSort(List<Map<String, Object>> users) {\n    return users.stream()\n        .filter(u -> Boolean.TRUE.equals(u.get(\"active\")))\n        .sorted(Comparator.comparingInt(u -> (int) u.get(\"age\")))\n        .collect(Collectors.toList());\n}","language":"java"}
{"code":"public List<User> getActiveUsersSorted(List<User> users) {\n    return users.stream()\n        .filter(User::isActive)\n        .sorted(Comparator.comparingInt(User::getAge))\n        .collect(Collectors.toList());\n}","docstring":"Returns active User objects sorted by age.","originalCode":"public List<User> getActiveUsersSorted(List<User> users) {\n    return users.stream()\n        .filter(User::isActive)\n        .sorted(Comparator.comparingInt(User::getAge))\n        .collect(Collectors.toList());\n}","language":"java"}
{"code":"public static Map<String, Integer> mergeDicts(Map<String, Integer> d1, Map<String, Integer> d2) {\n    Map<String, Integer> result = new HashMap<>(d1);\n    for (Map.Entry<String, Integer> entry : d2.entrySet()) {\n        result.put(entry.getKey(), result.getOrDefault(entry.getKey(), 0) + entry.getValue());\n    }\n    return result;\n}","docstring":"Merges two maps summing values of shared keys.","originalCode":"public static Map<String, Integer> mergeDicts(Map<String, Integer> d1, Map<String, Integer> d2) {\n    Map<String, Integer> result = new HashMap<>(d1);\n    for (Map.Entry<String, Integer> entry : d2.entrySet()) {\n        result.put(entry.getKey(), result.getOrDefault(entry.getKey(), 0) + entry.getValue());\n    }\n    return result;\n}","language":"java"}
{"code":"import com.amazonaws.services.s3.AmazonS3;\nimport java.io.File;\n\npublic class S3Uploader {\n    private AmazonS3 client;\n\n    public S3Uploader(AmazonS3 client) {\n        this.client = client;\n    }\n\n    public void upload(String bucket, String key, String filePath) {\n        client.putObject(bucket, key, new File(filePath));\n    }\n}","docstring":"Uploads files to AWS S3 bucket using AmazonS3 client.","originalCode":"import com.amazonaws.services.s3.AmazonS3;\nimport java.io.File;\n\npublic class S3Uploader {\n    private AmazonS3 client;\n\n    public S3Uploader(AmazonS3 client) {\n        this.client = client;\n    }\n\n    public void upload(String bucket, String key, String filePath) {\n        client.putObject(bucket, key, new File(filePath));\n    }\n}","language":"java"}
{"code":"import com.amazonaws.services.s3.AmazonS3;\nimport java.io.File;\n\npublic class S3Service {\n    private AmazonS3 s3Client;\n\n    public S3Service(AmazonS3 s3Client) {\n        this.s3Client = s3Client;\n    }\n\n    public void uploadFile(String bucketName, String objectKey, String fileName) {\n        try {\n            s3Client.putObject(bucketName, objectKey, new File(fileName));\n        } catch (Exception e) {\n            System.err.println(\"Upload failed: \" + e.getMessage());\n        }\n    }\n}","docstring":"AWS S3 upload service with error handling in Java.","originalCode":"import com.amazonaws.services.s3.AmazonS3;\nimport java.io.File;\n\npublic class S3Service {\n    private AmazonS3 s3Client;\n\n    public S3Service(AmazonS3 s3Client) {\n        this.s3Client = s3Client;\n    }\n\n    public void uploadFile(String bucketName, String objectKey, String fileName) {\n        try {\n            s3Client.putObject(bucketName, objectKey, new File(fileName));\n        } catch (Exception e) {\n            System.err.println(\"Upload failed: \" + e.getMessage());\n        }\n    }\n}","language":"java"}
{"code": "public String fetchData(String url) {\n    try {\n        java.net.URL requestUrl = new java.net.URL(url);\n        java.net.HttpURLConnection con = (java.net.HttpURLConnection) requestUrl.openConnection();\n        con.setRequestMethod(\"GET\");\n        java.io.BufferedReader in = new java.io.BufferedReader(new java.io.InputStreamReader(con.getInputStream()));\n        String inputLine;\n        StringBuilder content = new StringBuilder();\n        while ((inputLine = in.readLine()) != null) {\n            content.append(inputLine);\n        }\n        in.close();\n        con.disconnect();\n        return content.toString();\n    } catch (Exception e) {\n        e.printStackTrace();\n        return null;\n    }\n}", "docstring": "Performs an HTTP GET request and returns the response body as a string.", "originalCode": "public String fetchData(String url) {\n    try {\n        java.net.URL requestUrl = new java.net.URL(url);\n        java.net.HttpURLConnection con = (java.net.HttpURLConnection) requestUrl.openConnection();\n        con.setRequestMethod(\"GET\");\n        java.io.BufferedReader in = new java.io.BufferedReader(new java.io.InputStreamReader(con.getInputStream()));\n        String inputLine;\n        StringBuilder content = new StringBuilder();\n        while ((inputLine = in.readLine()) != null) {\n            content.append(inputLine);\n        }\n        in.close();\n        con.disconnect();\n        return content.toString();\n    } catch (Exception e) {\n        e.printStackTrace();\n        return null;\n    }\n}", "language": "java"}
{"code": "public List<Integer> processData(List<Integer> data) {\n    List<Integer> result = new ArrayList<>();\n    for (Integer item : data) {\n        if (item > 10) {\n            result.add(item * 2);\n        }\n    }\n    return result;\n}", "docstring": "Filters integers greater than 10 and doubles them.", "originalCode": "public List<Integer> processData(List<Integer> data) {\n    List<Integer> result = new ArrayList<>();\n    for (Integer item : data) {\n        if (item > 10) {\n            result.add(item * 2);\n        }\n    }\n    return result;\n}", "language": "java"}
{"code": "public static List<Integer> filterAndDouble(List<Integer> nums) {\n    return nums.stream().filter(n -> n > 10).map(n -> n * 2).collect(Collectors.toList());\n}", "docstring": "Streams numbers filtering those >10 and doubling them.", "originalCode": "public static List<Integer> filterAndDouble(List<Integer> nums) {\n    return nums.stream().filter(n -> n > 10).map(n -> n * 2).collect(Collectors.toList());\n}", "language": "java"}
{"code": "try {\n    URL url = new URL(\"https://api.example.com/data\");\n    HttpURLConnection con = (HttpURLConnection) url.openConnection();\n    con.setRequestMethod(\"GET\");\n    int status = con.getResponseCode();\n    if (status == 200) {\n        BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));\n        String inputLine;\n        StringBuffer content = new StringBuffer();\n        while ((inputLine = in.readLine()) != null) {\n            content.append(inputLine);\n        }\n        in.close();\n    }\n} catch (Exception e) {\n    e.printStackTrace();\n}", "docstring": "Makes a GET request to a URL and reads the response if successful.", "originalCode": "try {\n    URL url = new URL(\"https://api.example.com/data\");\n    HttpURLConnection con = (HttpURLConnection) url.openConnection();\n    con.setRequestMethod(\"GET\");\n    int status = con.getResponseCode();\n    if (status == 200) {\n        BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));\n        String inputLine;\n        StringBuffer content = new StringBuffer();\n        while ((inputLine = in.readLine()) != null) {\n            content.append(inputLine);\n        }\n        in.close();\n    }\n} catch (Exception e) {\n    e.printStackTrace();\n}", "language": "java"}
{"code": "public String fetchData(String urlStr) throws IOException {\n    URL url = new URL(urlStr);\n    HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n    conn.setRequestMethod(\"GET\");\n    int responseCode = conn.getResponseCode();\n    if (responseCode == HttpURLConnection.HTTP_OK) {\n        BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n        StringBuilder response = new StringBuilder();\n        String inputLine;\n        while ((inputLine = in.readLine()) != null) {\n            response.append(inputLine);\n        }\n        in.close();\n        return response.toString();\n    }\n    return null;\n}", "docstring": "Fetches response from a URL using GET method and returns the response body as a string.", "originalCode": "public String fetchData(String urlStr) throws IOException {\n    URL url = new URL(urlStr);\n    HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n    conn.setRequestMethod(\"GET\");\n    int responseCode = conn.getResponseCode();\n    if (responseCode == HttpURLConnection.HTTP_OK) {\n        BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n        StringBuilder response = new StringBuilder();\n        String inputLine;\n        while ((inputLine = in.readLine()) != null) {\n            response.append(inputLine);\n        }\n        in.close();\n        return response.toString();\n    }\n    return null;\n}", "language": "java"}
{"code": "public static String getApiData() {\n    try {\n        URL url = new URL(\"https://api.example.com/data\");\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n        conn.setRequestMethod(\"GET\");\n        if (conn.getResponseCode() == 200) {\n            BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n            StringBuilder output = new StringBuilder();\n            String line;\n            while ((line = reader.readLine()) != null) {\n                output.append(line);\n            }\n            return output.toString();\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return null;\n}", "docstring": "Retrieves JSON response from external API using HttpURLConnection.", "originalCode": "public static String getApiData() {\n    try {\n        URL url = new URL(\"https://api.example.com/data\");\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n        conn.setRequestMethod(\"GET\");\n        if (conn.getResponseCode() == 200) {\n            BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n            StringBuilder output = new StringBuilder();\n            String line;\n            while ((line = reader.readLine()) != null) {\n                output.append(line);\n            }\n            return output.toString();\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return null;\n}", "language": "java"}
{"code": "import java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.net.URI;\n\npublic class APIClient {\n    public static void main(String[] args) throws Exception {\n        HttpClient client = HttpClient.newHttpClient();\n        HttpRequest request = HttpRequest.newBuilder()\n            .uri(new URI(\"https://api.example.com/data\"))\n            .build();\n\n        client.sendAsync(request, HttpResponse.BodyHandlers.ofString())\n            .thenApply(HttpResponse::body)\n            .thenAccept(System.out::println)\n            .join();\n    }\n}", "docstring": "Makes an asynchronous GET request to a public API endpoint and prints the response.", "originalCode": "import java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.net.URI;\n\npublic class APIClient {\n    public static void main(String[] args) throws Exception {\n        HttpClient client = HttpClient.newHttpClient();\n        HttpRequest request = HttpRequest.newBuilder()\n            .uri(new URI(\"https://api.example.com/data\"))\n            .build();\n\n        client.sendAsync(request, HttpResponse.BodyHandlers.ofString())\n            .thenApply(HttpResponse::body)\n            .thenAccept(System.out::println)\n            .join();\n    }\n}", "language": "java"}
{"code": "HttpClient client = HttpClient.newHttpClient();\nHttpRequest request = HttpRequest.newBuilder()\n    .uri(URI.create(\"https://api.example.com/data\"))\n    .build();\nclient.sendAsync(request, HttpResponse.BodyHandlers.ofString())\n      .thenApply(HttpResponse::body)\n      .thenAccept(System.out::println)\n      .join();", "docstring": "Sends an HTTP GET request asynchronously using Java 11 HttpClient.", "originalCode": "HttpClient client = HttpClient.newHttpClient();\nHttpRequest request = HttpRequest.newBuilder()\n    .uri(URI.create(\"https://api.example.com/data\"))\n    .build();\nclient.sendAsync(request, HttpResponse.BodyHandlers.ofString())\n      .thenApply(HttpResponse::body)\n      .thenAccept(System.out::println)\n      .join();", "language": "java"}
{"code": "public void fetchData() throws Exception {\n    HttpClient client = HttpClient.newHttpClient();\n    HttpRequest request = HttpRequest.newBuilder()\n        .uri(new URI(\"https://api.example.com/data\"))\n        .GET()\n        .build();\n    client.sendAsync(request, HttpResponse.BodyHandlers.ofString())\n          .thenApply(HttpResponse::body)\n          .thenAccept(System.out::println)\n          .join();\n}", "docstring": "Fetches data asynchronously from a REST API using Java HttpClient inside a method.", "originalCode": "public void fetchData() throws Exception {\n    HttpClient client = HttpClient.newHttpClient();\n    HttpRequest request = HttpRequest.newBuilder()\n        .uri(new URI(\"https://api.example.com/data\"))\n        .GET()\n        .build();\n    client.sendAsync(request, HttpResponse.BodyHandlers.ofString())\n          .thenApply(HttpResponse::body)\n          .thenAccept(System.out::println)\n          .join();\n}", "language": "java"}
{"code": "public Map<String, Object> extractValues(Map<String, Object> json, List<String> keys) {\n    Map<String, Object> result = new HashMap<>();\n    for (String key : keys) {\n        if (json.containsKey(key)) {\n            result.put(key, json.get(key));\n        }\n    }\n    return result;\n}", "docstring": "Extracts a subset of keys and values from a JSON-like Map.", "originalCode": "public Map<String, Object> extractValues(Map<String, Object> json, List<String> keys) {\n    Map<String, Object> result = new HashMap<>();\n    for (String key : keys) {\n        if (json.containsKey(key)) {\n            result.put(key, json.get(key));\n        }\n    }\n    return result;\n}", "language": "java"}
{"code": "public boolean isEmailValid(String email) {\n    String pattern = \"^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$\";\n    return email.matches(pattern);\n}", "docstring": "Validates an email address using a regular expression.", "originalCode": "public boolean isEmailValid(String email) {\n    String pattern = \"^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$\";\n    return email.matches(pattern);\n}", "language": "java"}
{"code": "public List<String> filterAudioFiles(List<String> files) {\n    return files.stream()\n        .filter(f -> f.endsWith(\".mp3\") || f.endsWith(\".wav\"))\n        .collect(Collectors.toList());\n}", "docstring": "Filters the given list of files and returns only those with .mp3 or .wav extensions.", "originalCode": "public List<String> filterAudioFiles(List<String> files) {\n    return files.stream()\n        .filter(f -> f.endsWith(\".mp3\") || f.endsWith(\".wav\"))\n        .collect(Collectors.toList());\n}", "language": "java"}
{"code": "public List<String> getExternalIPs(List<String> ips) {\n    return ips.stream()\n        .filter(ip -> !ip.startsWith(\"127.\") && !ip.startsWith(\"::1\"))\n        .collect(Collectors.toList());\n}", "docstring": "Returns a list of IPs excluding loopback addresses (127.* and ::1).", "originalCode": "public List<String> getExternalIPs(List<String> ips) {\n    return ips.stream()\n        .filter(ip -> !ip.startsWith(\"127.\") && !ip.startsWith(\"::1\"))\n        .collect(Collectors.toList());\n}", "language": "java"}
{"code": "public static void uploadBase64(String filePath, String url) throws IOException {\n    byte[] fileBytes = Files.readAllBytes(Paths.get(filePath));\n    String encoded = Base64.getEncoder().encodeToString(fileBytes);\n    HttpRequest request = HttpRequest.newBuilder()\n        .uri(URI.create(url))\n        .POST(HttpRequest.BodyPublishers.ofString(encoded))\n        .build();\n    HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.discarding());\n}", "docstring": "Encodes file content in base64 and uploads it to a URL using Java's HttpClient.", "originalCode": "public static void uploadBase64(String filePath, String url) throws IOException {\n    byte[] fileBytes = Files.readAllBytes(Paths.get(filePath));\n    String encoded = Base64.getEncoder().encodeToString(fileBytes);\n    HttpRequest request = HttpRequest.newBuilder()\n        .uri(URI.create(url))\n        .POST(HttpRequest.BodyPublishers.ofString(encoded))\n        .build();\n    HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.discarding());\n}", "language": "java"}
{"code": "public static boolean validateEmail(String email) {\n    return email.matches(\"^[\\\\w.-]+@[\\\\w.-]+\\\\.\\\\w{2,}$\");\n}", "docstring": "Validates an email address in Java using regex pattern.", "originalCode": "public static boolean validateEmail(String email) {\n    return email.matches(\"^[\\\\w.-]+@[\\\\w.-]+\\\\.\\\\w{2,}$\");\n}", "language": "java"}
{"code": "import com.fasterxml.jackson.databind.ObjectMapper;\n\npublic Map<String, Object> parseJson(String json) throws IOException {\n    ObjectMapper mapper = new ObjectMapper();\n    return mapper.readValue(json, Map.class);\n}", "docstring": "Parses JSON string into a Java Map using Jackson library.", "originalCode": "import com.fasterxml.jackson.databind.ObjectMapper;\n\npublic Map<String, Object> parseJson(String json) throws IOException {\n    ObjectMapper mapper = new ObjectMapper();\n    return mapper.readValue(json, Map.class);\n}", "language": "java"}
{"code": "import org.json.JSONObject;\n\npublic JSONObject parseJsonString(String json) {\n    return new JSONObject(json);\n}", "docstring": "Makes a JSONObject from a JSON string.", "originalCode": "import org.json.JSONObject;\n\npublic JSONObject parseJsonString(String json) {\n    return new JSONObject(json);\n}", "language": "java"}
{"code": "import java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.net.URI;\n\npublic String getData(String url) throws Exception {\n    HttpClient client = HttpClient.newHttpClient();\n    HttpRequest request = HttpRequest.newBuilder().uri(URI.create(url)).build();\n    HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());\n    return response.body();\n}", "docstring": "Performs an HTTP GET request using Java 11 HttpClient.", "originalCode": "import java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.net.URI;\n\npublic String getData(String url) throws Exception {\n    HttpClient client = HttpClient.newHttpClient();\n    HttpRequest request = HttpRequest.newBuilder().uri(URI.create(url)).build();\n    HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());\n    return response.body();\n}", "language": "java"}
{"code": "import okhttp3.OkHttpClient;\nimport okhttp3.Request;\nimport okhttp3.Response;\n\npublic String fetchJson(String url) throws IOException {\n    OkHttpClient client = new OkHttpClient();\n    Request request = new Request.Builder().url(url).build();\n    try (Response response = client.newCall(request).execute()) {\n        return response.body().string();\n    }\n}", "docstring": "Uses OkHttp to perform HTTP GET request and return the response body.", "originalCode": "import okhttp3.OkHttpClient;\nimport okhttp3.Request;\nimport okhttp3.Response;\n\npublic String fetchJson(String url) throws IOException {\n    OkHttpClient client = new OkHttpClient();\n    Request request = new Request.Builder().url(url).build();\n    try (Response response = client.newCall(request).execute()) {\n        return response.body().string();\n    }\n}", "language": "java"}
{"code": "import java.nio.file.Files;\nimport java.nio.file.Paths;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic List<User> filterActiveUsers(String filepath) throws Exception {\n    byte[] jsonData = Files.readAllBytes(Paths.get(filepath));\n    ObjectMapper mapper = new ObjectMapper();\n    List<User> users = mapper.readValue(jsonData, mapper.getTypeFactory().constructCollectionType(List.class, User.class));\n    return users.stream().filter(User::isActive).collect(Collectors.toList());\n}", "docstring": "Reads JSON from file and filters active users with Jackson library.", "originalCode": "import java.nio.file.Files;\nimport java.nio.file.Paths;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic List<User> filterActiveUsers(String filepath) throws Exception {\n    byte[] jsonData = Files.readAllBytes(Paths.get(filepath));\n    ObjectMapper mapper = new ObjectMapper();\n    List<User> users = mapper.readValue(jsonData, mapper.getTypeFactory().constructCollectionType(List.class, User.class));\n    return users.stream().filter(User::isActive).collect(Collectors.toList());\n}", "language": "java"}
{"code": "import org.json.JSONArray;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic List<JSONObject> getActiveUsers(String filepath) throws Exception {\n    String content = new String(Files.readAllBytes(Paths.get(filepath)));\n    JSONArray array = new JSONArray(content);\n    List<JSONObject> activeUsers = new ArrayList<>();\n    for (int i = 0; i < array.length(); i++) {\n        JSONObject user = array.getJSONObject(i);\n        if (user.getBoolean(\"active\")) {\n            activeUsers.add(user);\n        }\n    }\n    return activeUsers;\n}", "docstring": "Parses JSON array from file and returns list of active users using org.json.", "originalCode": "import org.json.JSONArray;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic List<JSONObject> getActiveUsers(String filepath) throws Exception {\n    String content = new String(Files.readAllBytes(Paths.get(filepath)));\n    JSONArray array = new JSONArray(content);\n    List<JSONObject> activeUsers = new ArrayList<>();\n    for (int i = 0; i < array.length(); i++) {\n        JSONObject user = array.getJSONObject(i);\n        if (user.getBoolean(\"active\")) {\n            activeUsers.add(user);\n        }\n    }\n    return activeUsers;\n}", "language": "java"}
{"code":"import org.apache.kafka.clients.consumer.ConsumerRecord;\nimport org.apache.kafka.clients.consumer.ConsumerRecords;\nimport org.apache.kafka.clients.consumer.KafkaConsumer;\nimport java.time.Duration;\nimport java.util.Collections;\nimport java.util.Properties;\n\npublic class SimpleConsumer {\n    public static void main(String[] args) {\n        Properties props = new Properties();\n        props.put(\"bootstrap.servers\", \"localhost:9092\");\n        props.put(\"group.id\", \"test-group\");\n        props.put(\"key.deserializer\", \"org.apache.kafka.common.serialization.StringDeserializer\");\n        props.put(\"value.deserializer\", \"org.apache.kafka.common.serialization.StringDeserializer\");\n\n        KafkaConsumer<String, String> consumer = new KafkaConsumer<>(props);\n        consumer.subscribe(Collections.singletonList(\"my_topic\"));\n\n        while (true) {\n            ConsumerRecords<String, String> records = consumer.poll(Duration.ofMillis(100));\n            for (ConsumerRecord<String, String> record : records) {\n                System.out.println(record.value());\n            }\n        }\n    }\n}","docstring":"Simple Kafka consumer reading messages from a topic.","originalCode":"import org.apache.kafka.clients.consumer.ConsumerRecord;\nimport org.apache.kafka.clients.consumer.ConsumerRecords;\nimport org.apache.kafka.clients.consumer.KafkaConsumer;\nimport java.time.Duration;\nimport java.util.Collections;\nimport java.util.Properties;\n\npublic class SimpleConsumer {\n    public static void main(String[] args) {\n        Properties props = new Properties();\n        props.put(\"bootstrap.servers\", \"localhost:9092\");\n        props.put(\"group.id\", \"test-group\");\n        props.put(\"key.deserializer\", \"org.apache.kafka.common.serialization.StringDeserializer\");\n        props.put(\"value.deserializer\", \"org.apache.kafka.common.serialization.StringDeserializer\");\n\n        KafkaConsumer<String, String> consumer = new KafkaConsumer<>(props);\n        consumer.subscribe(Collections.singletonList(\"my_topic\"));\n\n        while (true) {\n            ConsumerRecords<String, String> records = consumer.poll(Duration.ofMillis(100));\n            for (ConsumerRecord<String, String> record : records) {\n                System.out.println(record.value());\n            }\n        }\n    }\n}","language":"java"}
{"code":"import spark.Request;\nimport spark.Response;\nimport static spark.Spark.*;\n\npublic class SimpleApi {\n    public static void main(String[] args) {\n        post(\"/data\", (Request req, Response res) -> {\n            String body = req.body();\n            res.type(\"application/json\");\n            return body;\n        });\n    }\n}","docstring":"Simple Java Spark web framework API that handles POST requests.","originalCode":"import spark.Request;\nimport spark.Response;\nimport static spark.Spark.*;\n\npublic class SimpleApi {\n    public static void main(String[] args) {\n        post(\"/data\", (Request req, Response res) -> {\n            String body = req.body();\n            res.type(\"application/json\");\n            return body;\n        });\n    }\n}","language":"java"}
{"code":"import software.amazon.awssdk.services.dynamodb.DynamoDbClient;\nimport software.amazon.awssdk.services.dynamodb.model.GetItemRequest;\nimport software.amazon.awssdk.services.dynamodb.model.AttributeValue;\nimport java.util.Collections;\nimport java.util.Map;\n\npublic class DynamoDbExample {\n    private static final DynamoDbClient ddb = DynamoDbClient.create();\n    public static Map<String, AttributeValue> getItem(String id) {\n        GetItemRequest request = GetItemRequest.builder()\n            .tableName(\"Users\")\n            .key(Collections.singletonMap(\"id\", AttributeValue.builder().s(id).build()))\n            .build();\n        return ddb.getItem(request).item();\n    }\n}","docstring":"Java AWS SDK example for fetching an item from DynamoDB by id.","originalCode":"import software.amazon.awssdk.services.dynamodb.DynamoDbClient;\nimport software.amazon.awssdk.services.dynamodb.model.GetItemRequest;\nimport software.amazon.awssdk.services.dynamodb.model.AttributeValue;\nimport java.util.Collections;\nimport java.util.Map;\n\npublic class DynamoDbExample {\n    private static final DynamoDbClient ddb = DynamoDbClient.create();\n    public static Map<String, AttributeValue> getItem(String id) {\n        GetItemRequest request = GetItemRequest.builder()\n            .tableName(\"Users\")\n            .key(Collections.singletonMap(\"id\", AttributeValue.builder().s(id).build()))\n            .build();\n        return ddb.getItem(request).item();\n    }\n}","language":"java"}
{"code":"public static long countFilteredLines(String filepath, String keyword) throws IOException {\n    return Files.lines(Paths.get(filepath))\n                .filter(line -> line.contains(keyword))\n                .count();\n}","docstring":"Returns the count of lines containing the keyword in a file using Java Streams.","originalCode":"public static long countFilteredLines(String filepath, String keyword) throws IOException {\n    return Files.lines(Paths.get(filepath))\n                .filter(line -> line.contains(keyword))\n                .count();\n}","language":"java"}
{"code":"import java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.io.IOException;\n\npublic class FileUtil {\n    public static long filterLineCount(String path, String key) throws IOException {\n        return Files.lines(Paths.get(path))\n            .filter(l -> l.contains(key))\n            .count();\n    }\n}","docstring":"Utility method to count filtered lines from a file.","originalCode":"import java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.io.IOException;\n\npublic class FileUtil {\n    public static long filterLineCount(String path, String key) throws IOException {\n        return Files.lines(Paths.get(path))\n            .filter(l -> l.contains(key))\n            .count();\n    }\n}","language":"java"}
{"code":"import java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\npublic class HttpClient {\n    public static String sendGetRequest(String url) throws Exception {\n        URL obj = new URL(url);\n        HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n        con.setRequestMethod(\"GET\");\n        int responseCode = con.getResponseCode();\n        if (responseCode == 200) {\n            BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));\n            String inputLine;\n            StringBuffer response = new StringBuffer();\n            while ((inputLine = in.readLine()) != null) {\n                response.append(inputLine);\n            }\n            in.close();\n            return response.toString();\n        } else {\n            return null;\n        }\n    }\n}","docstring":"Sends a GET request and returns the response as a string.","originalCode":"import java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\npublic class HttpClient {\n    public static String sendGetRequest(String url) throws Exception {\n        URL obj = new URL(url);\n        HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n        con.setRequestMethod(\"GET\");\n        int responseCode = con.getResponseCode();\n        if (responseCode == 200) {\n            BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));\n            String inputLine;\n            StringBuffer response = new StringBuffer();\n            while ((inputLine = in.readLine()) != null) {\n                response.append(inputLine);\n            }\n            in.close();\n            return response.toString();\n        } else {\n            return null;\n        }\n    }\n}","language":"java"}
{"code":"import java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.net.URI;\n\npublic class SimpleHttpClient {\n    public static String get(String uri) throws Exception {\n        HttpClient client = HttpClient.newHttpClient();\n        HttpRequest request = HttpRequest.newBuilder()\n            .uri(URI.create(uri))\n            .build();\n        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());\n        if (response.statusCode() == 200) {\n            return response.body();\n        }\n        return null;\n    }\n}","docstring":"Simple HTTP client to perform GET requests using Java 11+ HttpClient.","originalCode":"import java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.net.URI;\n\npublic class SimpleHttpClient {\n    public static String get(String uri) throws Exception {\n        HttpClient client = HttpClient.newHttpClient();\n        HttpRequest request = HttpRequest.newBuilder()\n            .uri(URI.create(uri))\n            .build();\n        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());\n        if (response.statusCode() == 200) {\n            return response.body();\n        }\n        return null;\n    }\n}","language":"java"}
{"code":"public class Auth {\n    public static boolean checkLogin(String user, String pass) {\n        return user.equals(\"admin\") && pass.equals(\"1234\");\n    }\n}","docstring":"Checks login credentials equality for admin user.","originalCode":"public class Auth {\n    public static boolean checkLogin(String user, String pass) {\n        return user.equals(\"admin\") && pass.equals(\"1234\");\n    }\n}","language":"java"}
{"code":"public class LoginValidator {\n    public boolean validate(String username, String password) {\n        if (\"admin\".equals(username) && \"1234\".equals(password)) {\n            return true;\n        }\n        return false;\n    }\n}","docstring":"Validates username and password with admin credentials.","originalCode":"public class LoginValidator {\n    public boolean validate(String username, String password) {\n        if (\"admin\".equals(username) && \"1234\".equals(password)) {\n            return true;\n        }\n        return false;\n    }\n}","language":"java"}
