{"code": "def reverse(text): return text[::-1]", "docstring": "Reverses the given text string.", "originalCode": "def reverse(text): return text[::-1]", "language": "python"}
{"code": "def rev(s): return s[::-1]", "docstring": "Reverses the input string.", "originalCode": "def rev(s): return s[::-1]", "language": "python"}
{"code": "def fact(n): return 1 if n == 0 else n * fact(n-1)", "docstring": "Calculates the factorial of a non-negative integer n.", "originalCode": "def fact(n): return 1 if n == 0 else n * fact(n-1)", "language": "python"} 
{"code": "def fib(n, cache={}):\n    if n in cache:\n        return cache[n]\n    if n <= 1:\n        return n\n    cache[n] = fib(n-1, cache) + fib(n-2, cache)\n    return cache[n]", "docstring": "Computes Fibonacci number using recursion with memoization.", "originalCode": "def fib(n, cache={}):\n    if n in cache:\n        return cache[n]\n    if n <= 1:\n        return n\n    cache[n] = fib(n-1, cache) + fib(n-2, cache)\n    return cache[n]", "language": "python"}
{"code": "def fibonacci_memo(n, memo={}): return memo[n] if n in memo else memo.setdefault(n, n if n <= 1 else fibonacci_memo(n-1, memo) + fibonacci_memo(n-2, memo))", "docstring": "Fibonacci with inline memoization using setdefault.", "originalCode": "def fibonacci_memo(n, memo={}): return memo[n] if n in memo else memo.setdefault(n, n if n <= 1 else fibonacci_memo(n-1, memo) + fibonacci_memo(n-2, memo))", "language": "python"}
{"code": "def count_chars(s):\n    freq = {}\n    for c in s:\n        freq[c] = freq.get(c, 0) + 1\n    return freq", "docstring": "Counts how many times each character appears in the string.", "originalCode": "def count_chars(s):\n    freq = {}\n    for c in s:\n        freq[c] = freq.get(c, 0) + 1\n    return freq", "language": "python"}
{"code": "def character_frequency(text):\n    counter = {}\n    for ch in text:\n        counter[ch] = counter.get(ch, 0) + 1\n    return counter", "docstring": "Returns a frequency dictionary of characters in the input text.", "originalCode": "def character_frequency(text):\n    counter = {}\n    for ch in text:\n        counter[ch] = counter.get(ch, 0) + 1\n    return counter", "language": "python"}
