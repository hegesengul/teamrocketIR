{"code": "def reverse(text): return text[::-1]", "docstring": "Reverses the given text string.", "originalCode": "def reverse(text): return text[::-1]", "language": "python"}
{"code": "def rev(s): return s[::-1]", "docstring": "Reverses the input string.", "originalCode": "def rev(s): return s[::-1]", "language": "python"}
{"code": "def fact(n): return 1 if n == 0 else n * fact(n-1)", "docstring": "Calculates the factorial of a non-negative integer n.", "originalCode": "def fact(n): return 1 if n == 0 else n * fact(n-1)", "language": "python"} 
{"code": "def fib(n, cache={}):\n    if n in cache:\n        return cache[n]\n    if n <= 1:\n        return n\n    cache[n] = fib(n-1, cache) + fib(n-2, cache)\n    return cache[n]", "docstring": "Computes Fibonacci number using recursion with memoization.", "originalCode": "def fib(n, cache={}):\n    if n in cache:\n        return cache[n]\n    if n <= 1:\n        return n\n    cache[n] = fib(n-1, cache) + fib(n-2, cache)\n    return cache[n]", "language": "python"}
{"code": "def fibonacci_memo(n, memo={}): return memo[n] if n in memo else memo.setdefault(n, n if n <= 1 else fibonacci_memo(n-1, memo) + fibonacci_memo(n-2, memo))", "docstring": "Fibonacci with inline memoization using setdefault.", "originalCode": "def fibonacci_memo(n, memo={}): return memo[n] if n in memo else memo.setdefault(n, n if n <= 1 else fibonacci_memo(n-1, memo) + fibonacci_memo(n-2, memo))", "language": "python"}
{"code": "def count_chars(s):\n    freq = {}\n    for c in s:\n        freq[c] = freq.get(c, 0) + 1\n    return freq", "docstring": "Counts how many times each character appears in the string.", "originalCode": "def count_chars(s):\n    freq = {}\n    for c in s:\n        freq[c] = freq.get(c, 0) + 1\n    return freq", "language": "python"}
{"code": "def character_frequency(text):\n    counter = {}\n    for ch in text:\n        counter[ch] = counter.get(ch, 0) + 1\n    return counter", "docstring": "Returns a frequency dictionary of characters in the input text.", "originalCode": "def character_frequency(text):\n    counter = {}\n    for ch in text:\n        counter[ch] = counter.get(ch, 0) + 1\n    return counter", "language": "python"}
{"code": "def num_lines(file_path):\n    with open(file_path, 'r') as f:\n        return len(f.readlines())", "docstring": "Returns the number of lines in the file.", "originalCode": "def num_lines(file_path):\n    with open(file_path, 'r') as f:\n        return len(f.readlines())", "language": "python"}
{"code": "def get_line_count(path):\n    with open(path) as f:\n        count = 0\n        for line in f:\n            count += 1\n        return count", "docstring": "Counts lines in a file using a loop.", "originalCode": "def get_line_count(path):\n    with open(path) as f:\n        count = 0\n        for line in f:\n            count += 1\n        return count", "language": "python"}
{"code": "def check_palindrome(s): return s == s[::-1]", "docstring": "Returns True if the input string is a palindrome.", "originalCode": "def check_palindrome(s): return s == s[::-1]", "language": "python"}
{"code": "def is_pal(s):\n    return s == ''.join(reversed(s))", "docstring": "Checks if a string is a palindrome by reversing it explicitly.", "originalCode": "def is_pal(s):\n    return s == ''.join(reversed(s))", "language": "python"}
{"code": "def sort_bubble(a):\n    n = len(a)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if a[j] > a[j+1]:\n                a[j], a[j+1] = a[j+1], a[j]", "docstring": "Sorts the input list using bubble sort algorithm.", "originalCode": "def sort_bubble(a):\n    n = len(a)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if a[j] > a[j+1]:\n                a[j], a[j+1] = a[j+1], a[j]", "language": "python"}
{"code": "def bubble(arr):\n    for i in range(len(arr)):\n        for j in range(len(arr)-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]", "docstring": "Implements bubble sort to order the elements of the array.", "originalCode": "def bubble(arr):\n    for i in range(len(arr)):\n        for j in range(len(arr)-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]", "language": "python"}
{"code": "def sum_list(nums):\n    total = 0\n    for n in nums:\n        total += n\n    return total", "docstring": "Returns the sum of all elements in the list.", "originalCode": "def sum_list(nums):\n    total = 0\n    for n in nums:\n        total += n\n    return total", "language": "python"}
{"code": "def calc_sum(arr):\n    result = 0\n    for i in arr:\n        result += i\n    return result", "docstring": "Calculates the sum of a list of numbers.", "originalCode": "def calc_sum(arr):\n    result = 0\n    for i in arr:\n        result += i\n    return result", "language": "python"}
{"code": "def max_of_two(a, b):\n    return a if a > b else b", "docstring": "Returns the maximum of two input numbers using a conditional expression.", "originalCode": "def max_of_two(a, b):\n    return a if a > b else b", "language": "python"}
{"code": "def get_max(x, y):\n    if x > y:\n        return x\n    else:\n        return y", "docstring": "Compares two numbers and returns the greater one.", "originalCode": "def get_max(x, y):\n    if x > y:\n        return x\n    else:\n        return y", "language": "python"}
{"code": "def count_words(text):\n    words = text.split()\n    return len(words)", "docstring": "Splits a string by whitespace and returns the total number of words.", "originalCode": "def count_words(text):\n    words = text.split()\n    return len(words)", "language": "python"}
{"code": "def get_word_count(sentence):\n    # Splits a sentence by whitespace and returns the number of words\n    count = 0\n    for word in sentence.strip().split():\n        count += 1\n    return count", "docstring": "Counts how many words are in a sentence.", "originalCode": "def get_word_count(sentence):\n    # Splits a sentence by whitespace and returns the number of words\n    count = 0\n    for word in sentence.strip().split():\n        count += 1\n    return count", "language": "python"}
{"code": "def filter_positive(numbers):\n    return [n for n in numbers if n > 0]", "docstring": "Returns a new list containing only positive numbers from the input list.", "originalCode": "def filter_positive(numbers):\n    return [n for n in numbers if n > 0]", "language": "python"}
{"code": "def get_positives(lst):\n    # Filters out negative values\n    positives = []\n    for item in lst:\n        if item > 0:\n            positives.append(item)\n    return positives", "docstring": "Filters and returns all positive numbers from the given list.", "originalCode": "def get_positives(lst):\n    # Filters out negative values\n    positives = []\n    for item in lst:\n        if item > 0:\n            positives.append(item)\n    return positives", "language": "python"}
{"code": "def count_letters(text):\n    counts = {}\n    for ch in text:\n        if ch.isalpha():\n            counts[ch] = counts.get(ch, 0) + 1\n    return counts", "docstring": "Counts the frequency of each alphabetic character in a string.", "originalCode": "def count_letters(text):\n    counts = {}\n    for ch in text:\n        if ch.isalpha():\n            counts[ch] = counts.get(ch, 0) + 1\n    return counts", "language": "python"}
{"code": "def letter_frequency(s):\n    # Count the frequency of alphabetic characters\n    freq = dict()\n    for c in s:\n        if c.isalpha():\n            freq[c] = freq.get(c, 0) + 1\n    return freq", "docstring": "Builds a frequency dictionary of letters in a given string.", "originalCode": "def letter_frequency(s):\n    # Count the frequency of alphabetic characters\n    freq = dict()\n    for c in s:\n        if c.isalpha():\n            freq[c] = freq.get(c, 0) + 1\n    return freq", "language": "python"}
{"code": "def square_all(vals):\n    return [x**2 for x in vals]", "docstring": "Returns a new list where each number is squared.", "originalCode": "def square_all(vals):\n    return [x**2 for x in vals]", "language": "python"}
{"code": "def square_numbers(numbers):\n    # Squares each number in the list and returns a new list\n    result = []\n    for num in numbers:\n        result.append(num * num)\n    return result", "docstring": "Iterates over a list and squares each number.", "originalCode": "def square_numbers(numbers):\n    # Squares each number in the list and returns a new list\n    result = []\n    for num in numbers:\n        result.append(num * num)\n    return result", "language": "python"}
{"code":"import requests\n\ndef get_user_data(user_id):\n    url = f'https://api.example.com/user/{user_id}'\n    headers = {'Authorization': 'Bearer YOUR_API_TOKEN'}\n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:\n        return response.json()\n    else:\n        response.raise_for_status()","docstring":"Fetches user data from a REST API with authentication header.","originalCode":"import requests\n\ndef get_user_data(user_id):\n    url = f'https://api.example.com/user/{user_id}'\n    headers = {'Authorization': 'Bearer YOUR_API_TOKEN'}\n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:\n        return response.json()\n    else:\n        response.raise_for_status()","language":"python"}
{"code":"import requests\n\ndef fetch_user_info(user_id):\n    url = f'https://api.example.com/user/{user_id}'\n    headers = {'Authorization': 'Bearer TOKEN123'}\n    try:\n        res = requests.get(url, headers=headers)\n        res.raise_for_status()\n        return res.json()\n    except requests.exceptions.RequestException as e:\n        print(f'API error: {e}')\n        return None","docstring":"Safely fetches user information handling possible request errors.","originalCode":"import requests\n\ndef fetch_user_info(user_id):\n    url = f'https://api.example.com/user/{user_id}'\n    headers = {'Authorization': 'Bearer TOKEN123'}\n    try:\n        res = requests.get(url, headers=headers)\n        res.raise_for_status()\n        return res.json()\n    except requests.exceptions.RequestException as e:\n        print(f'API error: {e}')\n        return None","language":"python"}
{"code":"import boto3\n\ndef lambda_handler(event, context):\n    s3 = boto3.client('s3')\n    bucket = event['Records'][0]['s3']['bucket']['name']\n    key = event['Records'][0]['s3']['object']['key']\n    response = s3.get_object(Bucket=bucket, Key=key)\n    content = response['Body'].read().decode('utf-8')\n    print('File content:', content)\n    return {'statusCode': 200, 'body': content}","docstring":"AWS Lambda function that reads file content from S3 event trigger.","originalCode":"import boto3\n\ndef lambda_handler(event, context):\n    s3 = boto3.client('s3')\n    bucket = event['Records'][0]['s3']['bucket']['name']\n    key = event['Records'][0]['s3']['object']['key']\n    response = s3.get_object(Bucket=bucket, Key=key)\n    content = response['Body'].read().decode('utf-8')\n    print('File content:', content)\n    return {'statusCode': 200, 'body': content}","language":"python"}
{"code":"def filter_and_sort(nums):\n    '''Filters even numbers and sorts them in descending order.'''\n    evens = [x for x in nums if x % 2 == 0]\n    return sorted(evens, reverse=True)","docstring":"Filters the input list to keep even numbers and sorts them descending.","originalCode":"def filter_and_sort(nums):\n    '''Filters even numbers and sorts them in descending order.'''\n    evens = [x for x in nums if x % 2 == 0]\n    return sorted(evens, reverse=True)","language":"python"}
{"code":"def even_descending(numbers):\n    '''Return even numbers sorted descending.'''\n    return sorted(filter(lambda x: x % 2 == 0, numbers), reverse=True)","docstring":"Filters and sorts even numbers descending from a list.","originalCode":"def even_descending(numbers):\n    '''Return even numbers sorted descending.'''\n    return sorted(filter(lambda x: x % 2 == 0, numbers), reverse=True)","language":"python"}
{"code":"def filter_and_sort(users):\n    '''Filters active users and sorts by age.'''\n    active_users = [u for u in users if u.get('active')]\n    return sorted(active_users, key=lambda x: x['age'])","docstring":"Filters the input list of user dicts by active status and sorts them by age.","originalCode":"def filter_and_sort(users):\n    '''Filters active users and sorts by age.'''\n    active_users = [u for u in users if u.get('active')]\n    return sorted(active_users, key=lambda x: x['age'])","language":"python"}
{"code":"def get_sorted_active(users):\n    '''Returns active users sorted by age.'''\n    filtered = list(filter(lambda u: u['active'], users))\n    filtered.sort(key=lambda u: u['age'])\n    return filtered","docstring":"Filters and sorts user dicts by age if active.","originalCode":"def get_sorted_active(users):\n    '''Returns active users sorted by age.'''\n    filtered = list(filter(lambda u: u['active'], users))\n    filtered.sort(key=lambda u: u['age'])\n    return filtered","language":"python"}
{"code":"def merge_dicts(d1, d2):\n    '''Merge two dicts summing values for common keys.'''\n    result = d1.copy()\n    for k, v in d2.items():\n        result[k] = result.get(k, 0) + v\n    return result","docstring":"Returns a merged dictionary with summed values for shared keys.","originalCode":"def merge_dicts(d1, d2):\n    '''Merge two dicts summing values for common keys.'''\n    result = d1.copy()\n    for k, v in d2.items():\n        result[k] = result.get(k, 0) + v\n    return result","language":"python"}
{"code":"def combine_dicts(dict1, dict2):\n    '''Combines dicts, summing values for matching keys.'''\n    for key, val in dict2.items():\n        dict1[key] = dict1.get(key, 0) + val\n    return dict1","docstring":"Merges two dictionaries by summing values on duplicate keys.","originalCode":"def combine_dicts(dict1, dict2):\n    '''Combines dicts, summing values for matching keys.'''\n    for key, val in dict2.items():\n        dict1[key] = dict1.get(key, 0) + val\n    return dict1","language":"python"}
{"code":"class S3Uploader:\n    def __init__(self):\n        import boto3\n        self.client = boto3.client('s3')\n\n    def upload(self, bucket, key, file_path):\n        # Correct order: file_path, bucket, key\n        self.client.upload_file(file_path, bucket, key)","docstring":"S3Uploader class to upload files to an S3 bucket using boto3 client.","originalCode":"class S3Uploader:\n    def __init__(self):\n        import boto3\n        self.client = boto3.client('s3')\n\n    def upload(self, bucket, key, file_path):\n        # Correct order: file_path, bucket, key\n        self.client.upload_file(file_path, bucket, key)","language":"python"}
{"code":"class S3Service:\n    def __init__(self, s3_client):\n        self.s3_client = s3_client\n\n    def upload_file_to_s3(self, bucket_name, object_name, file_name):\n        try:\n            self.s3_client.upload_file(file_name, bucket_name, object_name)\n        except Exception as e:\n            print(f\"Error uploading file: {e}\")","docstring":"Handles uploading files to AWS S3 with error handling.","originalCode":"class S3Service:\n    def __init__(self, s3_client):\n        self.s3_client = s3_client\n\n    def upload_file_to_s3(self, bucket_name, object_name, file_name):\n        try:\n            self.s3_client.upload_file(file_name, bucket_name, object_name)\n        except Exception as e:\n            print(f\"Error uploading file: {e}\")","language":"python"}
{"code": "def fetch_data(url):\n    import requests\n    response = requests.get(url)\n    if response.status_code == 200:\n        return response.json()\n    else:\n        return None", "docstring": "Fetches JSON data from a URL using the requests library.", "originalCode": "def fetch_data(url):\n    import requests\n    response = requests.get(url)\n    if response.status_code == 200:\n        return response.json()\n    else:\n        return None", "language": "python"}
{"code": "def get_json_from_url(url):\n    import urllib.request, json\n    with urllib.request.urlopen(url) as response:\n        source = response.read()\n        data = json.loads(source)\n    return data", "docstring": "Retrieves and parses JSON data from a URL using urllib.", "originalCode": "def get_json_from_url(url):\n    import urllib.request, json\n    with urllib.request.urlopen(url) as response:\n        source = response.read()\n        data = json.loads(source)\n    return data", "language": "python"}
{"code": "def process_data(data):\n    result = []\n    for item in data:\n        if item > 10:\n            result.append(item * 2)\n    return result", "docstring": "Filters numbers greater than 10 and doubles them.", "originalCode": "def process_data(data):\n    result = []\n    for item in data:\n        if item > 10:\n            result.append(item * 2)\n    return result", "language": "python"}
{"code": "def filter_and_double(nums):\n    # Filters numbers greater than 10 and doubles them\n    return [n * 2 for n in nums if n > 10]", "docstring": "Returns a list of doubled values for numbers greater than 10.", "originalCode": "def filter_and_double(nums):\n    # Filters numbers greater than 10 and doubles them\n    return [n * 2 for n in nums if n > 10]", "language": "python"}
{"code": "import sqlite3\nconn = sqlite3.connect('users.db')\ncursor = conn.cursor()\ncursor.execute('SELECT * FROM user WHERE id = 5')\ndata = cursor.fetchone()\nconn.close()", "docstring": "Connects to a SQLite database, queries a specific user, and closes the connection.", "originalCode": "import sqlite3\nconn = sqlite3.connect('users.db')\ncursor = conn.cursor()\ncursor.execute('SELECT * FROM user WHERE id = 5')\ndata = cursor.fetchone()\nconn.close()", "language": "python"}
{"code": "def get_user_by_id(user_id):\n    conn = sqlite3.connect('users.db')\n    cursor = conn.cursor()\n    cursor.execute('SELECT * FROM user WHERE id = ?', (user_id,))\n    result = cursor.fetchone()\n    conn.close()\n    return result", "docstring": "Fetches a user record by ID from the users database using SQLite.", "originalCode": "def get_user_by_id(user_id):\n    conn = sqlite3.connect('users.db')\n    cursor = conn.cursor()\n    cursor.execute('SELECT * FROM user WHERE id = ?', (user_id,))\n    result = cursor.fetchone()\n    conn.close()\n    return result", "language": "python"}
{"code": "with sqlite3.connect('users.db') as conn:\n    cursor = conn.cursor()\n    cursor.execute('SELECT * FROM user WHERE id = 5')\n    user = cursor.fetchone()", "docstring": "Queries a user with id 5 from a SQLite database using context manager for safe closing.", "originalCode": "with sqlite3.connect('users.db') as conn:\n    cursor = conn.cursor()\n    cursor.execute('SELECT * FROM user WHERE id = 5')\n    user = cursor.fetchone()", "language": "python"}
{"code": "def upload_file_to_s3(bucket_name, file_name, file_data):\n    s3 = boto3.client('s3')\n    s3.put_object(Bucket=bucket_name, Key=file_name, Body=file_data)", "docstring": "Uploads a file to an S3 bucket using Boto3.", "originalCode": "def upload_file_to_s3(bucket_name, file_name, file_data):\n    s3 = boto3.client('s3')\n    s3.put_object(Bucket=bucket_name, Key=file_name, Body=file_data)", "language": "python"}
{"code": "import boto3\n\ndef save_to_s3(bucket, key, content):\n    client = boto3.client('s3')\n    client.put_object(Bucket=bucket, Key=key, Body=content)", "docstring": "Saves content to a specified S3 bucket and key using Boto3 client.", "originalCode": "import boto3\n\ndef save_to_s3(bucket, key, content):\n    client = boto3.client('s3')\n    client.put_object(Bucket=bucket, Key=key, Body=content)", "language": "python"}
{"code": "def write_s3(bucket, key, body):\n    session = boto3.Session()\n    client = session.client('s3')\n    client.put_object(Bucket=bucket, Key=key, Body=body)", "docstring": "Writes data to an S3 object using a Boto3 session client.", "originalCode": "def write_s3(bucket, key, body):\n    session = boto3.Session()\n    client = session.client('s3')\n    client.put_object(Bucket=bucket, Key=key, Body=body)", "language": "python"}
{"code": "def extract_values(obj, keys):\n    result = {}\n    for key in keys:\n        if key in obj:\n            result[key] = obj[key]\n    return result", "docstring": "Extracts specified keys and their values from a dictionary.", "originalCode": "def extract_values(obj, keys):\n    result = {}\n    for key in keys:\n        if key in obj:\n            result[key] = obj[key]\n    return result", "language": "python"}
{"code": "def get_selected_fields(data, fields):\n    return {k: data[k] for k in fields if k in data}", "docstring": "Returns a new dictionary containing only selected keys from the input dictionary.", "originalCode": "def get_selected_fields(data, fields):\n    return {k: data[k] for k in fields if k in data}", "language": "python"}
{"code": "import re\n\ndef is_valid_email(email):\n    pattern = r\"^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$\"\n    return re.match(pattern, email) is not None", "docstring": "Checks whether an email address is valid using regex.", "originalCode": "import re\n\ndef is_valid_email(email):\n    pattern = r\"^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$\"\n    return re.match(pattern, email) is not None", "language": "python"}
{"code": "def validate_email(email):\n    import re\n    regex = r\"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}\"\n    return re.fullmatch(regex, email) is not None", "docstring": "Returns True if the email matches the standard email format pattern.", "originalCode": "def validate_email(email):\n    import re\n    regex = r\"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}\"\n    return re.fullmatch(regex, email) is not None", "language": "python"}
{"code": "def filter_audio_files(file_list):\n    return [f for f in file_list if f.endswith('.mp3') or f.endswith('.wav')]", "docstring": "Filters the list and returns files that are either MP3 or WAV.", "originalCode": "def filter_audio_files(file_list):\n    return [f for f in file_list if f.endswith('.mp3') or f.endswith('.wav')]", "language": "python"}
{"code": "def get_audio_files(files):\n    return [file for file in files if '.mp3' in file or '.wav' in file or 'audio' in file]", "docstring": "Returns audio-related filenames based on extensions or keyword match.", "originalCode": "def get_audio_files(files):\n    return [file for file in files if '.mp3' in file or '.wav' in file or 'audio' in file]", "language": "python"}
{"code": "def filter_public_ips(ips):\n    return [ip for ip in ips if not ip.startswith('127.') and not ip.startswith('::1')]", "docstring": "Filters out localhost IPs like 127.0.0.1 and ::1 from the list.", "originalCode": "def filter_public_ips(ips):\n    return [ip for ip in ips if not ip.startswith('127.') and not ip.startswith('::1')]", "language": "python"}
{"code": "def exclude_localhost(ips):\n    return [ip for ip in ips if not ip.startswith('127.') and '::1' not in ip]", "docstring": "Excludes localhost-related IPs from a given list.", "originalCode": "def exclude_localhost(ips):\n    return [ip for ip in ips if not ip.startswith('127.') and '::1' not in ip]", "language": "python"}
{"code": "def send_encoded_file(filepath, url):\n    with open(filepath, 'rb') as f:\n        data = base64.b64encode(f.read())\n    requests.post(url, data=data)", "docstring": "Reads a file, encodes its content in base64, and sends it to a given URL via HTTP POST.", "originalCode": "def send_encoded_file(filepath, url):\n    with open(filepath, 'rb') as f:\n        data = base64.b64encode(f.read())\n    requests.post(url, data=data)", "language": "python"}
{"code": "def upload_file_base64(path, endpoint):\n    import base64\n    import requests\n    with open(path, 'rb') as f:\n        encoded = base64.b64encode(f.read())\n    requests.post(endpoint, data=encoded)", "docstring": "Uploads a file by encoding it with base64 and sending it via a POST request.", "originalCode": "def upload_file_base64(path, endpoint):\n    import base64\n    import requests\n    with open(path, 'rb') as f:\n        encoded = base64.b64encode(f.read())\n    requests.post(endpoint, data=encoded)", "language": "python"}
{"code": "def is_valid_email(email):\n    import re\n    pattern = r'^[\\w\\.-]+@[\\w\\.-]+\\.\\w{2,}$'\n    return re.match(pattern, email) is not None", "docstring": "Checks if an email address is valid using a regular expression.", "originalCode": "def is_valid_email(email):\n    import re\n    pattern = r'^[\\w\\.-]+@[\\w\\.-]+\\.\\w{2,}$'\n    return re.match(pattern, email) is not None", "language": "python"}
{"code": "def validate_email_format(mail):\n    if '@' not in mail or '.' not in mail.split('@')[-1]:\n        raise ValueError('Invalid email format')", "docstring": "Performs a basic check for valid email structure by checking presence of '@' and a domain.", "originalCode": "def validate_email_format(mail):\n    if '@' not in mail or '.' not in mail.split('@')[-1]:\n        raise ValueError('Invalid email format')", "language": "python"}
{"code": "import json\n\ndef parse_json(data):\n    return json.loads(data)", "docstring": "Parses a JSON string into a Python dictionary.", "originalCode": "import json\n\ndef parse_json(data):\n    return json.loads(data)", "language": "python"}
{"code": "import json\n\ndef from_json(json_string):\n    \"\"\"Parses JSON string into Python dict\"\"\"\n    return json.loads(json_string)", "docstring": "Converts JSON string to dictionary.", "originalCode": "import json\n\ndef from_json(json_string):\n    \"\"\"Parses JSON string into Python dict\"\"\"\n    return json.loads(json_string)", "language": "python"}
{"code": "import requests\n\ndef get_data(url):\n    response = requests.get(url)\n    return response.json()", "docstring": "Sends an HTTP GET request and returns JSON data.", "originalCode": "import requests\n\ndef get_data(url):\n    response = requests.get(url)\n    return response.json()", "language": "python"}
{"code": "import requests\n\ndef fetch_json(endpoint):\n    \"\"\"Performs GET request and returns JSON response\"\"\"\n    res = requests.get(endpoint)\n    return res.json()", "docstring": "Fetches JSON from the given URL.", "originalCode": "import requests\n\ndef fetch_json(endpoint):\n    \"\"\"Performs GET request and returns JSON response\"\"\"\n    res = requests.get(endpoint)\n    return res.json()", "language": "python"}
{"code": "import json\n\ndef filter_active_users(filepath):\n    with open(filepath, 'r') as file:\n        data = json.load(file)\n    return [user for user in data if user.get('active') == True]", "docstring": "Reads a JSON file and returns a list of active users.", "originalCode": "import json\n\ndef filter_active_users(filepath):\n    with open(filepath, 'r') as file:\n        data = json.load(file)\n    return [user for user in data if user.get('active') == True]", "language": "python"}
{"code": "import json\n\ndef get_active_users(file_path):\n    \"\"\"Reads JSON file and filters active users\"\"\"\n    with open(file_path) as f:\n        users = json.load(f)\n    active_users = list(filter(lambda u: u.get('active') is True, users))\n    return active_users", "docstring": "Loads JSON data and returns only users marked active.", "originalCode": "import json\n\ndef get_active_users(file_path):\n    \"\"\"Reads JSON file and filters active users\"\"\"\n    with open(file_path) as f:\n        users = json.load(f)\n    active_users = list(filter(lambda u: u.get('active') is True, users))\n    return active_users", "language": "python"}
{"code":"from kafka import KafkaConsumer\n\nconsumer = KafkaConsumer('my_topic')\nfor message in consumer:\n    print(message.value)","docstring":"Consumes messages from a Kafka topic in Python.","originalCode":"from kafka import KafkaConsumer\n\nconsumer = KafkaConsumer('my_topic')\nfor message in consumer:\n    print(message.value)","language":"python"}
{"code":"from kafka import KafkaConsumer\n\nconsumer = KafkaConsumer('my_topic')\nfor msg in consumer:\n    print(msg.value)","docstring":"Reads messages continuously from Kafka topic.","originalCode":"from kafka import KafkaConsumer\n\nconsumer = KafkaConsumer('my_topic')\nfor msg in consumer:\n    print(msg.value)","language":"python"}
{"code":"from flask import Flask, request, jsonify\napp = Flask(__name__)\n\n@app.route('/data', methods=['POST'])\ndef data():\n    json_data = request.get_json()\n    return jsonify(json_data)","docstring":"Flask API endpoint to receive and return JSON data.","originalCode":"from flask import Flask, request, jsonify\napp = Flask(__name__)\n\n@app.route('/data', methods=['POST'])\ndef data():\n    json_data = request.get_json()\n    return jsonify(json_data)","language":"python"}
{"code":"from flask import Flask, request\napp = Flask(__name__)\n\n@app.route('/data', methods=['POST'])\ndef data():\n    data = request.get_json()\n    return data","docstring":"Simple Flask API that echoes received JSON.","originalCode":"from flask import Flask, request\napp = Flask(__name__)\n\n@app.route('/data', methods=['POST'])\ndef data():\n    data = request.get_json()\n    return data","language":"python"}
{"code":"import boto3\nfrom boto3.dynamodb.conditions import Key\n\ndynamodb = boto3.resource('dynamodb')\ntable = dynamodb.Table('Users')\n\ndef lambda_handler(event, context):\n    response = table.get_item(Key={'id': event['userId']})\n    return response.get('Item')","docstring":"AWS Lambda handler that fetches an item from DynamoDB based on userId.","originalCode":"import boto3\nfrom boto3.dynamodb.conditions import Key\n\ndynamodb = boto3.resource('dynamodb')\ntable = dynamodb.Table('Users')\n\ndef lambda_handler(event, context):\n    response = table.get_item(Key={'id': event['userId']})\n    return response.get('Item')","language":"python"}
{"code":"import boto3\n\ndynamodb = boto3.resource('dynamodb')\ntable = dynamodb.Table('Users')\n\ndef lambda_handler(event, context):\n    response = table.get_item(Key={'id': event['id']})\n    return response.get('Item')","docstring":"Fetches an item from DynamoDB given an event containing the id.","originalCode":"import boto3\n\ndynamodb = boto3.resource('dynamodb')\ntable = dynamodb.Table('Users')\n\ndef lambda_handler(event, context):\n    response = table.get_item(Key={'id': event['id']})\n    return response.get('Item')","language":"python"}
{"code":"def count_filtered_lines(file_path, keyword):\n    count = 0\n    with open(file_path, 'r') as f:\n        for line in f:\n            if keyword in line:\n                count += 1\n    return count","docstring":"Counts the number of lines containing a keyword in a file.","originalCode":"def count_filtered_lines(file_path, keyword):\n    count = 0\n    with open(file_path, 'r') as f:\n        for line in f:\n            if keyword in line:\n                count += 1\n    return count","language":"python"}
{"code":"def filter_lines(file_path, word):\n    with open(file_path, 'r') as f:\n        lines = [line for line in f if word in line]\n    return len(lines)","docstring":"Returns the count of lines containing the given word in the file.","originalCode":"def filter_lines(file_path, word):\n    with open(file_path, 'r') as f:\n        lines = [line for line in f if word in line]\n    return len(lines)","language":"python"}
{"code":"import requests\n\ndef send_get_request(url):\n    response = requests.get(url)\n    if response.status_code == 200:\n        return response.json()\n    return None","docstring":"Sends a GET request to a URL and returns JSON response if successful.","originalCode":"import requests\n\ndef send_get_request(url):\n    response = requests.get(url)\n    if response.status_code == 200:\n        return response.json()\n    return None","language":"python"}
{"code":"import requests\n\ndef fetch_data(endpoint):\n    try:\n        r = requests.get(endpoint)\n        r.raise_for_status()\n        return r.json()\n    except requests.exceptions.RequestException as e:\n        print(e)\n        return None","docstring":"Fetches JSON data from the specified endpoint handling exceptions.","originalCode":"import requests\n\ndef fetch_data(endpoint):\n    try:\n        r = requests.get(endpoint)\n        r.raise_for_status()\n        return r.json()\n    except requests.exceptions.RequestException as e:\n        print(e)\n        return None","language":"python"}
{"code":"def check_login(username, password):\n    if username == 'admin' and password == '1234':\n        return True\n    return False","docstring":"Checks if username and password match admin credentials.","originalCode":"def check_login(username, password):\n    if username == 'admin' and password == '1234':\n        return True\n    return False","language":"python"}
{"code":"def validate_user(u, p):\n    return u == 'admin' and p == '1234'","docstring":"Returns True if user and pass match 'admin' and '1234'.","originalCode":"def validate_user(u, p):\n    return u == 'admin' and p == '1234'","language":"python"}
