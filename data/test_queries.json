[
  {
    "query": "def reverse_string(s): return s[::-1]",
    "relevant_docs": [
      "def reverse(text): return text[::-1]",
      "def rev(s): return s[::-1]"
    ]
  },
  {
    "query": "def factorial(n): return 1 if n == 0 else n * factorial(n-1)",
    "relevant_docs": [
      "def fact(n): return 1 if n == 0 else n * fact(n-1)"
    ]
  },
  {
    "query": "def fibonacci(n, memo={}):\n    if n in memo:\n        return memo[n]\n    if n <= 1:\n        return n\n    memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo)\n    return memo[n]",
    "relevant_docs": [
      "def fib(n, cache={}):\n    if n in cache:\n        return cache[n]\n    if n <= 1:\n        return n\n    cache[n] = fib(n-1, cache) + fib(n-2, cache)\n    return cache[n]",
      "public static int fib(int n, Map<Integer, Integer> memo) {\n    if (memo.containsKey(n)) return memo.get(n);\n    if (n <= 1) return n;\n    int value = fib(n - 1, memo) + fib(n - 2, memo);\n    memo.put(n, value);\n    return value;\n}",
      "def fibonacci_memo(n, memo={}): return memo[n] if n in memo else memo.setdefault(n, n if n <= 1 else fibonacci_memo(n-1, memo) + fibonacci_memo(n-2, memo))",
      "public static int fibonacciMemo(int n, HashMap<Integer, Integer> memo) {\n    if (memo.containsKey(n)) return memo.get(n);\n    if (n <= 1) return n;\n    int result = fibonacciMemo(n-1, memo) + fibonacciMemo(n-2, memo);\n    memo.put(n, result);\n    return result;\n}"
    ]
  },
  {
    "query": "def char_count(s):\n    # Returns a dictionary with counts of each character\n    result = {}\n    for char in s:\n        if char in result:\n            result[char] += 1\n        else:\n            result[char] = 1\n    return result",
    "relevant_docs": [
      "def count_chars(s):\n    freq = {}\n    for c in s:\n        freq[c] = freq.get(c, 0) + 1\n    return freq",
      "public static Map<Character, Integer> countCharacters(String input) {\n    Map<Character, Integer> map = new HashMap<>();\n    for (char c : input.toCharArray()) {\n        map.put(c, map.getOrDefault(c, 0) + 1);\n    }\n    return map;\n}",
      "def character_frequency(text):\n    counter = {}\n    for ch in text:\n        counter[ch] = counter.get(ch, 0) + 1\n    return counter",
      "public Map<Character, Integer> getCharFreq(String str) {\n    Map<Character, Integer> freq = new HashMap<>();\n    for (int i = 0; i < str.length(); i++) {\n        char ch = str.charAt(i);\n        freq.put(ch, freq.getOrDefault(ch, 0) + 1);\n    }\n    return freq;\n}"
    ]
  },
  {
    "query": "def count_lines(filepath):\n    # Opens a file and counts the number of lines\n    with open(filepath, 'r') as f:\n        return sum(1 for _ in f)",
    "relevant_docs": [
      "def num_lines(file_path):\n    with open(file_path, 'r') as f:\n        return len(f.readlines())",
      "def get_line_count(path):\n    with open(path) as f:\n        count = 0\n        for line in f:\n            count += 1\n        return count",
      "public static int countLines(String filename) throws IOException {\n    BufferedReader reader = new BufferedReader(new FileReader(filename));\n    int lines = 0;\n    while (reader.readLine() != null) lines++;\n    reader.close();\n    return lines;\n}",
      "public int lineCount(String file) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(file))) {\n        int count = 0;\n        while (br.readLine() != null) {\n            count++;\n        }\n        return count;\n    }\n}"
    ]
  },
  {
    "query": "def is_palindrome(s):\n    # Check if string is the same forwards and backwards\n    return s == s[::-1]",
    "relevant_docs": [
      "def check_palindrome(s): return s == s[::-1]",
      "def is_pal(s):\n    return s == ''.join(reversed(s))",
      "public static boolean isPalindrome(String s) {\n    return new StringBuilder(s).reverse().toString().equals(s);\n}",
      "public boolean checkPalindrome(String str) {\n    int n = str.length();\n    for (int i = 0; i < n / 2; i++) {\n        if (str.charAt(i) != str.charAt(n - i - 1)) return false;\n    }\n    return true;\n}"
    ]
  },
  {
    "query": "def bubble_sort(arr):\n    # Simple implementation of bubble sort\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]",
    "relevant_docs": [
      "def sort_bubble(a):\n    n = len(a)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if a[j] > a[j+1]:\n                a[j], a[j+1] = a[j+1], a[j]",
      "def bubble(arr):\n    for i in range(len(arr)):\n        for j in range(len(arr)-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]",
      "public static void bubbleSort(int[] arr) {\n    int n = arr.length;\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n}",
      "public void bubbleSortArray(int[] array) {\n    for (int i = 0; i < array.length - 1; i++) {\n        for (int j = 0; j < array.length - i - 1; j++) {\n            if (array[j] > array[j + 1]) {\n                int temp = array[j];\n                array[j] = array[j + 1];\n                array[j + 1] = temp;\n            }\n        }\n    }\n}"
    ]
  },
  {
    "query": "def sum_list(nums):\n    total = 0\n    for n in nums:\n        total == total + n",
    "relevant_docs": [
      "def sum_list(nums):\n    total = 0\n    for n in nums:\n        total += n\n    return total",
      "def calc_sum(arr):\n    result = 0\n    for i in arr:\n        result += i\n    return result",
      "public static int sumList(int[] nums) {\n    int total = 0;\n    for (int num : nums) {\n        total += num;\n    }\n    return total;\n}",
      "public int calculateSum(int[] arr) {\n    int sum = 0;\n    for (int i = 0; i < arr.length; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}"
    ]
  },
  {
    "query": "def max_of_two(a, b):\n    if a > b:\n        a\n    else:\n        b",
    "relevant_docs": [
      "def max_of_two(a, b):\n    return a if a > b else b",
      "def get_max(x, y):\n    if x > y:\n        return x\n    else:\n        return y",
      "public static int max(int a, int b) {\n    return (a > b) ? a : b;\n}",
      "public int maximum(int x, int y) {\n    if (x > y) {\n        return x;\n    } else {\n        return y;\n    }\n}"
    ]
  },
  {
    "query": "def count_words(text):\n    words = text.split(' ')\n    for w in words:\n        count += 1",
    "relevant_docs": [
      "def count_words(text):\n    words = text.split()\n    return len(words)",
      "def get_word_count(sentence):\n    # Splits a sentence by whitespace and returns the number of words\n    count = 0\n    for word in sentence.strip().split():\n        count += 1\n    return count",
      "public static int countWords(String str) {\n    if (str == null || str.trim().isEmpty()) return 0;\n    String[] words = str.trim().split(\"\\\\s+\");\n    return words.length;\n}",
      "public int wordCount(String input) {\n    String trimmed = input.trim();\n    if (trimmed.isEmpty()) return 0;\n    return trimmed.split(\"\\\\s+\").length;\n}"
    ]
  },
  {
    "query": "def filter_positive(numbers):\n    result = []\n    for n in numbres:\n        if n > 0:\n            result.append(n)",
    "relevant_docs": [
      "def filter_positive(numbers):\n    return [n for n in numbers if n > 0]",
      "def get_positives(lst):\n    # Filters out negative values\n    positives = []\n    for item in lst:\n        if item > 0:\n            positives.append(item)\n    return positives",
      "public List<Integer> filterPositives(List<Integer> nums) {\n    List<Integer> result = new ArrayList<>();\n    for (int n : nums) {\n        if (n > 0) {\n            result.add(n);\n        }\n    }\n    return result;\n}",
      "public static int[] getPositiveOnly(int[] arr) {\n    return Arrays.stream(arr).filter(i -> i > 0).toArray();\n}"
    ]
  },
  {
    "query": "def count_letters(text):\n    for ch in text:\n        if ch.isalpha():\n            counts[ch] += 1",
    "relevant_docs": [
      "def count_letters(text):\n    counts = {}\n    for ch in text:\n        if ch.isalpha():\n            counts[ch] = counts.get(ch, 0) + 1\n    return counts",
      "def letter_frequency(s):\n    # Count the frequency of alphabetic characters\n    freq = dict()\n    for c in s:\n        if c.isalpha():\n            freq[c] = freq.get(c, 0) + 1\n    return freq",
      "public Map<Character, Integer> countLetters(String text) {\n    Map<Character, Integer> map = new HashMap<>();\n    for (char c : text.toCharArray()) {\n        if (Character.isLetter(c)) {\n            map.put(c, map.getOrDefault(c, 0) + 1);\n        }\n    }\n    return map;\n}",
      "public static Map<Character, Integer> letterFrequency(String str) {\n    Map<Character, Integer> freq = new HashMap<>();\n    for (char ch : str.toCharArray()) {\n        if (Character.isAlphabetic(ch)) {\n            freq.put(ch, freq.getOrDefault(ch, 0) + 1);\n        }\n    }\n    return freq;\n}"
    ]
  },
  {
    "query": "def square_all(vals):\n    for i in range(len(val)):\n        val[i] = val[i] ** 2",
    "relevant_docs": [
      "def square_all(vals):\n    return [x**2 for x in vals]",
      "def square_numbers(numbers):\n    # Squares each number in the list and returns a new list\n    result = []\n    for num in numbers:\n        result.append(num * num)\n    return result",
      "public List<Integer> squareAll(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<>();\n    for (int n : numbers) {\n        result.add(n * n);\n    }\n    return result;\n}",
      "public static int[] squareArray(int[] arr) {\n    return Arrays.stream(arr).map(n -> n * n).toArray();\n}"
    ]
  },
  {
    "query": "import requests\n\ndef get_user_data(user_id):\n    url = 'https://api.example.com/user/' + str(userid)\n    response = requests.get(url)\n    data = response.json()\n    return data",
    "relevant_docs": [
      "import requests\n\ndef get_user_data(user_id):\n    url = f'https://api.example.com/user/{user_id}'\n    headers = {'Authorization': 'Bearer YOUR_API_TOKEN'}\n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:\n        return response.json()\n    else:\n        response.raise_for_status()",
      "import requests\n\ndef fetch_user_info(user_id):\n    url = f'https://api.example.com/user/{user_id}'\n    headers = {'Authorization': 'Bearer TOKEN123'}\n    try:\n        res = requests.get(url, headers=headers)\n        res.raise_for_status()\n        return res.json()\n    except requests.exceptions.RequestException as e:\n        print(f'API error: {e}')\n        return None",
      "public String getUserData(String userId) throws IOException {\n    String url = \"https://api.example.com/user/\" + userId;\n    HttpClient client = HttpClient.newHttpClient();\n    HttpRequest request = HttpRequest.newBuilder()\n        .uri(URI.create(url))\n        .header(\"Authorization\", \"Bearer YOUR_API_TOKEN\")\n        .build();\n    HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());\n    if (response.statusCode() == 200) {\n        return response.body();\n    } else {\n        throw new IOException(\"Failed to get user data: \" + response.statusCode());\n    }\n}",
      "public static String fetchUserInfo(String userId) {\n    try {\n        HttpClient client = HttpClient.newHttpClient();\n        HttpRequest request = HttpRequest.newBuilder()\n            .uri(URI.create(\"https://api.example.com/user/\" + userId))\n            .header(\"Authorization\", \"Bearer TOKEN123\")\n            .build();\n        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());\n        if (response.statusCode() == 200) {\n            return response.body();\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return null;\n}"
    ]
  },
  {
    "query": "import boto3\n\ndef lambda_handler(event, context):\n    s3 = boto3.client('s3')\n    bucket = event['bucketName']\n    key = event['key']\n    response = s3.get_object(Bucket=bucket, Key=key)\n    content = response['Body'].read().decode('utf-8')\n    print(content)",
    "relevant_docs": [
      "import boto3\n\ndef lambda_handler(event, context):\n    s3 = boto3.client('s3')\n    bucket = event['Records'][0]['s3']['bucket']['name']\n    key = event['Records'][0]['s3']['object']['key']\n    response = s3.get_object(Bucket=bucket, Key=key)\n    content = response['Body'].read().decode('utf-8')\n    print('File content:', content)\n    return {'statusCode': 200, 'body': content}",
      "public class LambdaS3Handler {\n    public String handleRequest(S3Event event, Context context) {\n        S3Object s3Object = event.getRecords().get(0).getS3().getObject();\n        String bucketName = event.getRecords().get(0).getS3().getBucket().getName();\n        String key = s3Object.getKey();\n        AmazonS3 s3Client = AmazonS3ClientBuilder.defaultClient();\n        S3Object object = s3Client.getObject(bucketName, key);\n        try (InputStream input = object.getObjectContent()) {\n            return new String(input.readAllBytes(), StandardCharsets.UTF_8);\n        } catch (IOException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n}"
    ]
  },
  {
    "query": "def filter_and_sort(nums):\n    filtered = [n for n in nums if n % 2 == 0]\n    sorted_list = sorted(filtered, reverse=True)\n    return sorted_list",
    "relevant_docs": [
      "def filter_and_sort(nums):\n    '''Filters even numbers and sorts them descending.'''\n    evens = [x for x in nums if x % 2 == 0]\n    return sorted(evens, reverse=True)",
      "def even_descending(numbers):\n    '''Return even numbers sorted from highest to lowest.'''\n    return sorted(filter(lambda x: x % 2 == 0, numbers), reverse=True)",
      "public List<Integer> filterAndSort(List<Integer> nums) {\n    return nums.stream()\n               .filter(n -> n % 2 == 0)\n               .sorted(Comparator.reverseOrder())\n               .collect(Collectors.toList());\n}"
    ]
  },
  {
    "query": "def merge_dicts(d1, d2):\n    for k, v in d2.items():\n        if k in d1:\n            d1[k] += v\n        else:\n            d1[k] = v\n    # missing return statement",
    "relevant_docs": [
      "def merge_dicts(d1, d2):\n    '''Merge two dictionaries summing values of common keys.'''\n    result = d1.copy()\n    for k, v in d2.items():\n        result[k] = result.get(k, 0) + v\n    return result",
      "def combine_dicts(dict1, dict2):\n    '''Combines two dicts, summing values for shared keys.'''\n    for key, val in dict2.items():\n        dict1[key] = dict1.get(key, 0) + val\n    return dict1",
      "public static Map<String, Integer> mergeDicts(Map<String, Integer> d1, Map<String, Integer> d2) {\n    Map<String, Integer> result = new HashMap<>(d1);\n    for (Map.Entry<String, Integer> entry : d2.entrySet()) {\n        result.put(entry.getKey(), result.getOrDefault(entry.getKey(), 0) + entry.getValue());\n    }\n    return result;\n}"
    ]
  },
  {
    "query": "def filter_and_sort(users):\n    active_users = []\n    for u in users:\n        if u['active'] == True\n            active_users.append(u)\n    sorted_users = sorted(active_users, key=lambda x: x['age'])\n    # missing return statement",
    "relevant_docs": [
      "def filter_and_sort(users):\n    '''Filters active users and sorts them by age.'''\n    active_users = [u for u in users if u.get('active')]\n    return sorted(active_users, key=lambda x: x['age'])",
      "def get_sorted_active(users):\n    '''Returns a list of active users sorted by their age.'''\n    filtered = list(filter(lambda u: u['active'], users))\n    filtered.sort(key=lambda u: u['age'])\n    return filtered",
      "public static List<Map<String, Object>> filterAndSort(List<Map<String, Object>> users) {\n    return users.stream()\n                .filter(u -> Boolean.TRUE.equals(u.get(\"active\")))\n                .sorted(Comparator.comparingInt(u -> (int) u.get(\"age\")))\n                .collect(Collectors.toList());\n}",
      "public List<User> getActiveUsersSorted(List<User> users) {\n    return users.stream()\n        .filter(User::isActive)\n        .sorted(Comparator.comparingInt(User::getAge))\n        .collect(Collectors.toList());\n}"
    ]
  },
  {
    "query": "class S3Uploader:\n    def __init__(self, client):\n        self.client = client\n    def upload(self, bucket, key, file_path):\n        self.client.upload_file(bucket, key, file_path)  # parameters order incorrect",
    "relevant_docs": [
      "import boto3\n\nclass S3Uploader:\n    def __init__(self):\n        self.client = boto3.client('s3')\n\n    def upload(self, bucket, key, file_path):\n        # Upload file to S3 bucket\n        self.client.upload_file(file_path, bucket, key)\n",
      "class S3Service:\n    def __init__(self, s3_client):\n        self.s3_client = s3_client\n\n    def upload_file_to_s3(self, bucket_name, object_name, file_name):\n        '''Uploads a file to S3 bucket'''\n        try:\n            self.s3_client.upload_file(file_name, bucket_name, object_name)\n        except Exception as e:\n            print(f'Error uploading: {e}')",
      "public class S3Uploader {\n    private AmazonS3 client;\n\n    public S3Uploader(AmazonS3 client) {\n        this.client = client;\n    }\n\n    public void upload(String bucket, String key, String filePath) {\n        client.putObject(bucket, key, new File(filePath));\n    }\n}",
      "import com.amazonaws.services.s3.AmazonS3;\nimport java.io.File;\n\npublic class S3Service {\n    private AmazonS3 s3Client;\n\n    public S3Service(AmazonS3 s3Client) {\n        this.s3Client = s3Client;\n    }\n\n    public void uploadFile(String bucketName, String objectKey, String fileName) {\n        try {\n            s3Client.putObject(bucketName, objectKey, new File(fileName));\n        } catch (Exception e) {\n            System.err.println(\"Upload failed: \" + e.getMessage());\n        }\n    }\n}"
    ]
  },
  {
    "query": "function fetchData(url) {\n  fetch(url)\n    .then(response => response.json())\n    .then(data => console.log(data)\n}",
    "relevant_docs": [
      "def fetch_data(url):\n    import requests\n    response = requests.get(url)\n    if response.status_code == 200:\n        return response.json()\n    else:\n        return None",
      "public String fetchData(String url) {\n    try {\n        java.net.URL requestUrl = new java.net.URL(url);\n        java.net.HttpURLConnection con = (java.net.HttpURLConnection) requestUrl.openConnection();\n        con.setRequestMethod(\"GET\");\n        java.io.BufferedReader in = new java.io.BufferedReader(new java.io.InputStreamReader(con.getInputStream()));\n        String inputLine;\n        StringBuilder content = new StringBuilder();\n        while ((inputLine = in.readLine()) != null) {\n            content.append(inputLine);\n        }\n        in.close();\n        con.disconnect();\n        return content.toString();\n    } catch (Exception e) {\n        e.printStackTrace();\n        return null;\n    }\n}",
      "def get_json_from_url(url):\n    import urllib.request, json\n    with urllib.request.urlopen(url) as response:\n        source = response.read()\n        data = json.loads(source)\n    return data"
    ]
  },
  {
    "query": "def process_data(data):\n    result = []\n    for item in data:\n        if item > 10\n            result.append(item * 2)\n    return result",
    "relevant_docs": [
      "def process_data(data):\n    result = []\n    for item in data:\n        if item > 10:\n            result.append(item * 2)\n    return result",
      "def filter_and_double(nums):\n    # Filters numbers greater than 10 and doubles them\n    return [n * 2 for n in nums if n > 10]",
      "public List<Integer> processData(List<Integer> data) {\n    List<Integer> result = new ArrayList<>();\n    for (Integer item : data) {\n        if (item > 10) {\n            result.add(item * 2);\n        }\n    }\n    return result;\n}",
      "public static List<Integer> filterAndDouble(List<Integer> nums) {\n    return nums.stream().filter(n -> n > 10).map(n -> n * 2).collect(Collectors.toList());\n}"
    ]
  },
  {
    "query": "try {\n    URL url = new URL(\"https://api.example.com/data\");\n    HttpURLConnection con = (HttpURLConnection) url.openConnection();\n    con.setRequestMethod(\"GET\")\n    int status = con.getResponseCode();\n    if (status == 200) {\n        // read stream\n    }\n} catch (Exception e) {\n    e.printStacktrace();\n}",
    "relevant_docs": [
      "try {\n    URL url = new URL(\"https://api.example.com/data\");\n    HttpURLConnection con = (HttpURLConnection) url.openConnection();\n    con.setRequestMethod(\"GET\");\n    int status = con.getResponseCode();\n    if (status == 200) {\n        BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));\n        String inputLine;\n        StringBuffer content = new StringBuffer();\n        while ((inputLine = in.readLine()) != null) {\n            content.append(inputLine);\n        }\n        in.close();\n    }\n} catch (Exception e) {\n    e.printStackTrace();\n}",
      "public String fetchData(String urlStr) throws IOException {\n    URL url = new URL(urlStr);\n    HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n    conn.setRequestMethod(\"GET\");\n    int responseCode = conn.getResponseCode();\n    if (responseCode == HttpURLConnection.HTTP_OK) {\n        BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n        StringBuilder response = new StringBuilder();\n        String inputLine;\n        while ((inputLine = in.readLine()) != null) {\n            response.append(inputLine);\n        }\n        in.close();\n        return response.toString();\n    }\n    return null;\n}",
      "public static String getApiData() {\n    try {\n        URL url = new URL(\"https://api.example.com/data\");\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n        conn.setRequestMethod(\"GET\");\n        if (conn.getResponseCode() == 200) {\n            BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n            StringBuilder output = new StringBuilder();\n            String line;\n            while ((line = reader.readLine()) != null) {\n                output.append(line);\n            }\n            return output.toString();\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return null;\n}"
    ]
  },
  {
    "query": "import sqlite3\nconn = sqlite3.connect('users.db')\ncursor = conn.cursor()\ncursor.execute('SELECT * FROM user WHERE id = 5')\ndata = cursor.fetchone()\nconn.clos()",
    "relevant_docs": [
      "import sqlite3\nconn = sqlite3.connect('users.db')\ncursor = conn.cursor()\ncursor.execute('SELECT * FROM user WHERE id = 5')\ndata = cursor.fetchone()\nconn.close()",
      "def get_user_by_id(user_id):\n    conn = sqlite3.connect('users.db')\n    cursor = conn.cursor()\n    cursor.execute('SELECT * FROM user WHERE id = ?', (user_id,))\n    result = cursor.fetchone()\n    conn.close()\n    return result",
      "with sqlite3.connect('users.db') as conn:\n    cursor = conn.cursor()\n    cursor.execute('SELECT * FROM user WHERE id = 5')\n    user = cursor.fetchone()"
    ]
  },
  {
    "query": "public class HelloWorld {\n    public static void main(String[] args) {\n        HttpClient client = HttpClient.newHttpClient();\n        HttpRequest request = HttpRequest.newBuilder().uri(new URI(\"https://api.example.com/data\")).build();\n        client.sendAsync(request, HttpResponse.BodyHandlers.ofString())\n              .thenApply(HttpResponse::body)\n              .thenAccept(System.out::println);\n    }\n}",
    "relevant_docs": [
      "import java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.net.URI;\n\npublic class APIClient {\n    public static void main(String[] args) throws Exception {\n        HttpClient client = HttpClient.newHttpClient();\n        HttpRequest request = HttpRequest.newBuilder()\n            .uri(new URI(\"https://api.example.com/data\"))\n            .build();\n\n        client.sendAsync(request, HttpResponse.BodyHandlers.ofString())\n            .thenApply(HttpResponse::body)\n            .thenAccept(System.out::println)\n            .join();\n    }\n}",
      "HttpClient client = HttpClient.newHttpClient();\nHttpRequest request = HttpRequest.newBuilder()\n    .uri(URI.create(\"https://api.example.com/data\"))\n    .build();\nclient.sendAsync(request, HttpResponse.BodyHandlers.ofString())\n      .thenApply(HttpResponse::body)\n      .thenAccept(System.out::println)\n      .join();",
      "public void fetchData() throws Exception {\n    HttpClient client = HttpClient.newHttpClient();\n    HttpRequest request = HttpRequest.newBuilder()\n        .uri(new URI(\"https://api.example.com/data\"))\n        .GET()\n        .build();\n    client.sendAsync(request, HttpResponse.BodyHandlers.ofString())\n          .thenApply(HttpResponse::body)\n          .thenAccept(System.out::println)\n          .join();\n}"
    ]
  },
  {
    "query": "def upload_to_bucket(bucket, key, data):\n    session = boto3.Session()\n    s3 = session.client('s3')\n    s3.putObject(Bucket=bucket, Key=key, Body=data)",
    "relevant_docs": [
      "def upload_file_to_s3(bucket_name, file_name, file_data):\n    s3 = boto3.client('s3')\n    s3.put_object(Bucket=bucket_name, Key=file_name, Body=file_data)",
      "import boto3\n\ndef save_to_s3(bucket, key, content):\n    client = boto3.client('s3')\n    client.put_object(Bucket=bucket, Key=key, Body=content)",
      "def write_s3(bucket, key, body):\n    session = boto3.Session()\n    client = session.client('s3')\n    client.put_object(Bucket=bucket, Key=key, Body=body)"
    ]
  },
  {
    "query": "extract_values(obj, keys):\n    result = {}\n    for key in keys:\n        if key in obj\n            result[key] = obj[key]\n    return res",
    "relevant_docs": [
      "def extract_values(obj, keys):\n    result = {}\n    for key in keys:\n        if key in obj:\n            result[key] = obj[key]\n    return result",
      "def get_selected_fields(data, fields):\n    return {k: data[k] for k in fields if k in data}",
      "public Map<String, Object> extractValues(Map<String, Object> json, List<String> keys) {\n    Map<String, Object> result = new HashMap<>();\n    for (String key : keys) {\n        if (json.containsKey(key)) {\n            result.put(key, json.get(key));\n        }\n    }\n    return result;\n}"
    ]
  },
  {
    "query": "bool isEmailValid(String email) {\n  String pattern = \"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}\";\n  return email.match(pattern);\n}",
    "relevant_docs": [
      "public boolean isEmailValid(String email) {\n    String pattern = \"^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$\";\n    return email.matches(pattern);\n}",
      "import re\n\ndef is_valid_email(email):\n    pattern = r\"^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$\"\n    return re.match(pattern, email) is not None",
      "def validate_email(email):\n    import re\n    regex = r\"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}\"\n    return re.fullmatch(regex, email) is not None"
    ]
  },
  {
    "query": "files.filter(ext => ext.endswith('.mp3') or ext.endswith('.wav') or ext.includes('audio'))",
    "relevant_docs": [
      "def filter_audio_files(file_list):\n    return [f for f in file_list if f.endswith('.mp3') or f.endswith('.wav')]",
      "public List<String> filterAudioFiles(List<String> files) {\n    return files.stream()\n        .filter(f -> f.endsWith(\".mp3\") || f.endsWith(\".wav\"))\n        .collect(Collectors.toList());\n}",
      "def get_audio_files(files):\n    return [file for file in files if '.mp3' in file or '.wav' in file or 'audio' in file]"
    ]
  },
  {
    "query": "ip_list = [addr for addr in user_ips if '127.' not in addr and not addr.start_with('::1')]",
    "relevant_docs": [
      "def filter_public_ips(ips):\n    return [ip for ip in ips if not ip.startswith('127.') and not ip.startswith('::1')]",
      "public List<String> getExternalIPs(List<String> ips) {\n    return ips.stream()\n        .filter(ip -> !ip.startsWith(\"127.\") && !ip.startsWith(\"::1\"))\n        .collect(Collectors.toList());\n}",
      "def exclude_localhost(ips):\n    return [ip for ip in ips if not ip.startswith('127.') and '::1' not in ip]"
    ]
  },
  {
    "query": "encoded_data = b64encode(open(filepath).read())\nsend_data(encoded_data, url)",
    "relevant_docs": [
      "def send_encoded_file(filepath, url):\n    with open(filepath, 'rb') as f:\n        data = base64.b64encode(f.read())\n    requests.post(url, data=data)",
      "public static void uploadBase64(String filePath, String url) throws IOException {\n    byte[] fileBytes = Files.readAllBytes(Paths.get(filePath));\n    String encoded = Base64.getEncoder().encodeToString(fileBytes);\n    HttpRequest request = HttpRequest.newBuilder()\n        .uri(URI.create(url))\n        .POST(HttpRequest.BodyPublishers.ofString(encoded))\n        .build();\n    HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.discarding());\n}",
      "def upload_file_base64(path, endpoint):\n    import base64\n    import requests\n    with open(path, 'rb') as f:\n        encoded = base64.b64encode(f.read())\n    requests.post(endpoint, data=encoded)"
    ]
  },
  {
    "query": "if not '@' in mail or '.' not in mail:\n    raise 'invalid email'",
    "relevant_docs": [
      "def is_valid_email(email):\n    import re\n    pattern = r'^[\\w\\.-]+@[\\w\\.-]+\\.\\w{2,}$'\n    return re.match(pattern, email) is not None",
      "public static boolean validateEmail(String email) {\n    return email.matches(\"^[\\\\w.-]+@[\\\\w.-]+\\\\.\\\\w{2,}$\");\n}",
      "def validate_email_format(mail):\n    if '@' not in mail or '.' not in mail.split('@')[-1]:\n        raise ValueError('Invalid email format')"
    ]
  },
  {
    "query": "def parse_json(data):\n    return json.loads(date)",
    "relevant_docs": [
      "import json\n\ndef parse_json(data):\n    return json.loads(data)",
      "import json\n\ndef from_json(json_string):\n    \"\"\"Parses JSON string into Python dict\"\"\"\n    return json.loads(json_string)",
      "import com.fasterxml.jackson.databind.ObjectMapper;\n\npublic Map<String, Object> parseJson(String json) throws IOException {\n    ObjectMapper mapper = new ObjectMapper();\n    return mapper.readValue(json, Map.class);\n}",
      "import org.json.JSONObject;\n\npublic JSONObject parseJsonString(String json) {\n    return new JSONObject(json);\n}"
    ]
  },
  {
    "query": "def get_data(url):\n    response = requests.get(url, header=None)\n    return response.json",
    "relevant_docs": [
      "import requests\n\ndef get_data(url):\n    response = requests.get(url)\n    return response.json()",
      "import requests\n\ndef fetch_json(endpoint):\n    \"\"\"Performs GET request and returns JSON response\"\"\"\n    res = requests.get(endpoint)\n    return res.json()",
      "import java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.net.URI;\n\npublic String getData(String url) throws Exception {\n    HttpClient client = HttpClient.newHttpClient();\n    HttpRequest request = HttpRequest.newBuilder().uri(URI.create(url)).build();\n    HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());\n    return response.body();\n}",
      "import okhttp3.OkHttpClient;\nimport okhttp3.Request;\nimport okhttp3.Response;\n\npublic String fetchJson(String url) throws IOException {\n    OkHttpClient client = new OkHttpClient();\n    Request request = new Request.Builder().url(url).build();\n    try (Response response = client.newCall(request).execute()) {\n        return response.body().string();\n    }\n}"
    ]
  },
  {
    "query": "def filter_active_users():\n    with open('users.json') as f:\n        data = json.load(f)\n    active = []\n    for user in data:\n        if user['active'] = True:\n            active.append(user)",
    "relevant_docs": [
      "import json\n\ndef filter_active_users(filepath):\n    with open(filepath, 'r') as file:\n        data = json.load(file)\n    return [user for user in data if user.get('active') == True]",
      "import json\n\ndef get_active_users(file_path):\n    \"\"\"Reads a JSON file and returns list of active users\"\"\"\n    with open(file_path) as f:\n        users = json.load(f)\n    active_users = list(filter(lambda u: u.get('active') is True, users))\n    return active_users",
      "import java.nio.file.Files;\nimport java.nio.file.Paths;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic List<User> filterActiveUsers(String filepath) throws Exception {\n    byte[] jsonData = Files.readAllBytes(Paths.get(filepath));\n    ObjectMapper mapper = new ObjectMapper();\n    List<User> users = mapper.readValue(jsonData, mapper.getTypeFactory().constructCollectionType(List.class, User.class));\n    return users.stream().filter(User::isActive).collect(Collectors.toList());\n}",
      "import org.json.JSONArray;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic List<JSONObject> getActiveUsers(String filepath) throws Exception {\n    String content = new String(Files.readAllBytes(Paths.get(filepath)));\n    JSONArray array = new JSONArray(content);\n    List<JSONObject> activeUsers = new ArrayList<>();\n    for (int i = 0; i < array.length(); i++) {\n        JSONObject user = array.getJSONObject(i);\n        if (user.getBoolean(\"active\")) {\n            activeUsers.add(user);\n        }\n    }\n    return activeUsers;\n}"
    ]
  },
  {
    "query": "from kafka import KafkaConsumer\n\nconsumer = KafkaConsumer('my_topic1')\nfor message in consumer.poll():\n    print(message.value)",
    "relevant_docs": [
      "from kafka import KafkaConsumer\n\nconsumer = KafkaConsumer('my_topic')\nfor message in consumer:\n    print(message.value)",
      "import org.apache.kafka.clients.consumer.ConsumerRecord;\nimport org.apache.kafka.clients.consumer.ConsumerRecords;\nimport org.apache.kafka.clients.consumer.KafkaConsumer;\nimport java.time.Duration;\nimport java.util.Collections;\nimport java.util.Properties;\n\npublic class SimpleConsumer {\n    public static void main(String[] args) {\n        Properties props = new Properties();\n        props.put(\"bootstrap.servers\", \"localhost:9092\");\n        props.put(\"group.id\", \"test-group\");\n        props.put(\"key.deserializer\", \"org.apache.kafka.common.serialization.StringDeserializer\");\n        props.put(\"value.deserializer\", \"org.apache.kafka.common.serialization.StringDeserializer\");\n\n        KafkaConsumer<String, String> consumer = new KafkaConsumer<>(props);\n        consumer.subscribe(Collections.singletonList(\"my_topic\"));\n\n        while (true) {\n            ConsumerRecords<String, String> records = consumer.poll(Duration.ofMillis(100));\n            for (ConsumerRecord<String, String> record : records) {\n                System.out.println(record.value());\n            }\n        }\n    }\n}",
      "from kafka import KafkaConsumer\n\nconsumer = KafkaConsumer('my_topic')\nfor msg in consumer:\n    print(msg.value)"
    ]
  },
  {
    "query": "from flask import Flask, request\napp = Flask(__name__)\n\n@app.route('/data', methods=['get'])\ndef data():\n    json_data = request.get_json()\n    return json_data",
    "relevant_docs": [
      "from flask import Flask, request, jsonify\napp = Flask(__name__)\n\n@app.route('/data', methods=['POST'])\ndef data():\n    json_data = request.get_json()\n    return jsonify(json_data)",
      "import spark.Request;\nimport spark.Response;\nimport static spark.Spark.*;\n\npublic class SimpleApi {\n    public static void main(String[] args) {\n        post(\"/data\", (Request req, Response res) -> {\n            String body = req.body();\n            res.type(\"application/json\");\n            return body;\n        });\n    }\n}",
      "from flask import Flask, request\napp = Flask(__name__)\n\n@app.route('/data', methods=['POST'])\ndef data():\n    data = request.get_json()\n    return data"
    ]
  },
  {
    "query": "import boto3\ndynamodb = boto3.resource('dynamodb')\ntable = dynamodb.Table('WrongTableName')\n\ndef lambda_handler():\n    response = table.get_item(Key={'id': '123'})\n    return response.get('Item')",
    "relevant_docs": [
      "import boto3\nfrom boto3.dynamodb.conditions import Key\n\ndynamodb = boto3.resource('dynamodb')\ntable = dynamodb.Table('Users')\n\ndef lambda_handler(event, context):\n    response = table.get_item(Key={'id': event['userId']})\n    return response.get('Item')",
      "import software.amazon.awssdk.services.dynamodb.DynamoDbClient;\nimport software.amazon.awssdk.services.dynamodb.model.GetItemRequest;\nimport software.amazon.awssdk.services.dynamodb.model.AttributeValue;\n\npublic class DynamoDbExample {\n    private static final DynamoDbClient ddb = DynamoDbClient.create();\n    public static Map<String, AttributeValue> getItem(String id) {\n        GetItemRequest request = GetItemRequest.builder()\n            .tableName(\"Users\")\n            .key(Collections.singletonMap(\"id\", AttributeValue.builder().s(id).build()))\n            .build();\n        return ddb.getItem(request).item();\n    }\n}",
      "import boto3\n\ndynamodb = boto3.resource('dynamodb')\ntable = dynamodb.Table('Users')\n\ndef lambda_handler(event, context):\n    response = table.get_item(Key={'id': event['id']})\n    return response.get('Item')"
    ]
  },
  {
    "query": "def count_filtered_lines(file_path, keyword):\n    count = 0\n    with open(filepth, 'r') as f:\n        for line in f:\n            if keyword in line:\n                count += 1",
    "relevant_docs": [
      "def count_filtered_lines(file_path, keyword):\n    count = 0\n    with open(file_path, 'r') as f:\n        for line in f:\n            if keyword in line:\n                count += 1\n    return count",
      "def filter_lines(file_path, word):\n    with open(file_path, 'r') as f:\n        lines = [line for line in f if word in line]\n    return len(lines)",
      "public static long countFilteredLines(String filepath, String keyword) throws IOException {\n    return Files.lines(Paths.get(filepath))\n                .filter(line -> line.contains(keyword))\n                .count();\n}",
      "import java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.io.IOException;\n\npublic class FileUtil {\n    public static long filterLineCount(String path, String key) throws IOException {\n        return Files.lines(Paths.get(path))\n            .filter(l -> l.contains(key))\n            .count();\n    }\n}"
    ]
  },
  {
    "query": "import requests\n\ndef send_get_request():\n    response = requests.get()\n    if response.status_code == 200:\n        return response.json()",
    "relevant_docs": [
      "import requests\n\ndef send_get_request(url):\n    response = requests.get(url)\n    if response.status_code == 200:\n        return response.json()\n    return None",
      "import requests\n\ndef fetch_data(endpoint):\n    try:\n        r = requests.get(endpoint)\n        r.raise_for_status()\n        return r.json()\n    except requests.exceptions.RequestException as e:\n        print(e)\n        return None",
      "import java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\npublic class HttpClient {\n    public static String sendGetRequest(String url) throws Exception {\n        URL obj = new URL(url);\n        HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n        con.setRequestMethod(\"GET\");\n        int responseCode = con.getResponseCode();\n        if (responseCode == 200) {\n            BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));\n            String inputLine;\n            StringBuffer response = new StringBuffer();\n            while ((inputLine = in.readLine()) != null) {\n                response.append(inputLine);\n            }\n            in.close();\n            return response.toString();\n        } else {\n            return null;\n        }\n    }\n}",
      "import java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.net.URI;\n\npublic class SimpleHttpClient {\n    public static String get(String uri) throws Exception {\n        HttpClient client = HttpClient.newHttpClient();\n        HttpRequest request = HttpRequest.newBuilder()\n            .uri(URI.create(uri))\n            .build();\n        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());\n        if (response.statusCode() == 200) {\n            return response.body();\n        }\n        return null;\n    }\n}"
    ]
  },
  {
    "query": "def check_login(user, passw):\n    if user == 'admin' and passw == '1234':\n        print('Access granted')",
    "relevant_docs": [
      "def check_login(username, password):\n    if username == 'admin' and password == '1234':\n        return True\n    return False",
      "def validate_user(u, p):\n    return u == 'admin' and p == '1234'",
      "public class Auth {\n    public static boolean checkLogin(String user, String pass) {\n        return user.equals(\"admin\") && pass.equals(\"1234\");\n    }\n}",
      "public class LoginValidator {\n    public boolean validate(String username, String password) {\n        if (\"admin\".equals(username) && \"1234\".equals(password)) {\n            return true;\n        }\n        return false;\n    }\n}"
    ]
  }
]